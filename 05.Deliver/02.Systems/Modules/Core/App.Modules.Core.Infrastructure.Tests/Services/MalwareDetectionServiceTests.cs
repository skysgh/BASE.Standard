using System;
using System.Text;
using App.Modules.Core.Common.Tests.Attributes;
using App.Modules.Core.Infrastructure.DependencyResolution;
using FluentAssertions;
using Xunit;

namespace App.Modules.Core.Infrastructure.Tests.Services
{
    public class MalwareDetectionServiceServiceTests : TestClassBase
    {

        [SelfNamingFact]
        public void CanGetMalwareDetectionService()
        {
            var service =
                DependencyLocator.Current
                    .GetInstance<Infrastructure.Services.IMediaMalwareDetectionService>();


            service.Should().NotBe(null);
        }


        [SelfNamingFact]
        public void MalwareDetectionServiceService_Does_Not_Stop_Safe_Files()
        {
            var service =
                DependencyLocator.Current
                    .GetInstance<Infrastructure.Services.IMediaMalwareDetectionService>();

            // As per:
            // http://2016.eicar.org/86-0-Intended-use.html
            var virus =
                @"Just any old safe text.";

            var result = service.Validate(Encoding.ASCII.GetBytes(virus), "safetext.txt", "text/plain");

            // Will fail if 50 tries/credits are expired....
            result.LatestScanMalwareDetected.Should().Be(false);
        }

        [SelfNamingFact]
        public void MalwareDetectionServiceService_Spot_A_Virus()
        {
            var service =
                DependencyLocator.Current
                    .GetInstance<Infrastructure.Services.IMediaMalwareDetectionService>();

            // As per:
            // http://2016.eicar.org/86-0-Intended-use.html
            var virus =
                @"X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*";

            var result = service.Validate(Encoding.ASCII.GetBytes(virus),"fakevirus.txt", "text/plain");

            // Will fail if 50 tries/credits are expired....
            result.LatestScanMalwareDetected.Should().Be(true);
        }

    }
}
