<?xml version="1.0"?>

<doc>
  <assembly>
    <name>App.Modules.Core.Infrastructure</name>
  </assembly>
  <members>
    <member name="T:App.AppDomainExtensions">
      <summary>
        Extensions to <see cref="T:System.AppDomain" /> objects.
      </summary>
    </member>
    <member name="M:App.AppDomainExtensions.LoadAllAppAssemblies(System.AppDomain)">
      <summary>
        Loads all assemblies specific to this application.
      </summary>
      <param name="appDomain">The application domain.</param>
    </member>
    <member name="M:App.AppDomainExtensions.GetAppAssemblies(System.AppDomain)">
      <summary>
        Gets this application assemblies
        (those that start with "App."
      </summary>
      <param name="appDomain">The application domain.</param>
      <returns></returns>
    </member>
    <member name="M:App.AppDomainExtensions.InvokeImplementing``1(System.AppDomain,System.Action{``0})">
      <summary>
        Gets all derived instantiable types, instantiates them
        (using <see cref="T:System.Activator" /> - *not* <see cref="!:AppDependencyLocator" />!)
        then runs the new instance through the provided action.
        <para>
          Invoked at least when scanning for StructureMap scanners
          in all assemblies.
        </para>
      </summary>
      <typeparam name="T"></typeparam>
      <param name="appDomain">The application domain.</param>
      <param name="func">The function.</param>
    </member>
    <member name="M:App.AppDomainExtensions.GetInstantiableTypesImplementing``1(System.AppDomain)">
      <summary>
        Gets all derived instantiable types, within the domain.
        <para>
          An example use case would be to find all API Controllers
          in order to associate them with a specific version.
        </para>
      </summary>
      <typeparam name="T"></typeparam>
      <param name="appDomain">The application domain.</param>
      <returns>
        the found types.
      </returns>
    </member>
    <member name="M:App.AppDomainExtensions.GetInstantiableTypesImplementing(System.AppDomain,System.Type)">
      <summary>
        Gets all derived instantiable types, within the domain.
        <para>
          An example use case would be to find all API Controllers
          in order to associate them with a specific version.
        </para>
      </summary>
      <param name="appDomain">The application domain.</param>
      <param name="type">The type.</param>
      <returns>the found types.</returns>
    </member>
    <member name="M:App.AppDomainExtensions.LoadAllBinDirectoryAssemblies(System.AppDomain)">
      <summary>
        Loads all assemblies in the bin directory.
      </summary>
      <param name="appDomain">The application domain.</param>
    </member>
    <member name="T:App.AssemblyExtensions">
      <summary>
        Extensions to an Assembly object.
      </summary>
    </member>
    <member name="T:App.CloudBlobContainerExtensions">
      <summary>
        Dependencies:
        * Nuget Packages:
        * WindowsAzure.Storage" version="8.6.0"
        * Microsoft.Azure.ConfigurationManager" version="3.2.3"
      </summary>
    </member>
    <member
      name="M:App.CloudBlobContainerExtensions.GetContainerSharedAccessSignatureUri(Microsoft.Azure.Storage.Blob.CloudBlobContainer,System.String,System.Nullable{System.TimeSpan},Microsoft.Azure.Storage.Blob.SharedAccessBlobPermissions)">
      <summary>
        Returns Uri composed of Container + SharedAccessSignature token.
        If PolicyName is provided, will return SAS generated off of the policy,
        otherwise will develop SAS from provided SharedAccessBlobPolicy parameters.
      </summary>
      <param name="container"></param>
      <param name="policyName"></param>
      <param name="duration"></param>
      <param name="sharedAccessBlobPermissions"></param>
      <returns></returns>
    </member>
    <member
      name="M:App.CloudBlobContainerExtensions.SetContainerSharedAccessPolicy(Microsoft.Azure.Storage.Blob.CloudBlobContainer,System.String,Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy)">
      <summary>
        Adds or replaces a Container's SharedAccessPolicy
      </summary>
      <param name="container"></param>
      <param name="policyName"></param>
      <param name="sharedAccessBlobPolicy"></param>
    </member>
    <member
      name="M:App.CloudBlobExtensions.GetBlobSharedAccessSignatureUri(Microsoft.Azure.Storage.Blob.CloudBlob,System.String,System.Nullable{System.TimeSpan},Microsoft.Azure.Storage.Blob.SharedAccessBlobPermissions)">
      <summary>
        Returns Uri composed of Container + SharedAccessSignature token.
        If PolicyName is provided, will return SAS generated off of the policy,
        otherwise will develop SAS from provided SharedAccessBlobPolicy parameters.
      </summary>
      <param name="cloudBlob"></param>
      <param name="policyName"></param>
      <param name="duration"></param>
      <param name="sharedAccessBlobPermissions"></param>
      <returns></returns>
    </member>
    <member name="T:App.MergeOption">
      Specifies how objects being loaded into the context are merged with objects already in the context.
    </member>
    <member name="F:App.MergeOption.AppendOnly">
      Objects already in the context are not loaded from the data source (default behavior).
    </member>
    <member name="F:App.MergeOption.OverwriteChanges">
      Objects are always loaded from the data source. Any property changes made
      to objects in the object context are overwritten by the data source values.
    </member>
    <member name="F:App.MergeOption.PreserveChanges">
      unmodified properties of objects in the object context are overwritten with server values.
    </member>
    <member name="F:App.MergeOption.NoTracking">
      Objects are maintained in a Detached state and are not tracked.
    </member>
    <member name="M:App.IntegerExtensions.BitIsNotSet(System.Int32,System.Int32)">
      <summary>
        <para>
          An XActLib Extension.
        </para>
        Bits the is not set.
        <para>
          ie: <c>(number &amp; (~flags)) == 0</c>
        </para>
        <para>
          If you want to set it, try: <c>number | flags</c>
        </para>
        <para>
          If you want to clear a flag, try: <c>number &amp; (~flags)</c>
        </para>
      </summary>
      <param name="number">The number.</param>
      <param name="flags">The flags.</param>
      <returns></returns>
      <internal>
        <para>6/11/2011: Sky</para>
      </internal>
    </member>
    <member name="M:App.ObjectExtensions.ConvertTo(System.Object,System.Type)">
      <summary>
        Convert a type to another type.
      </summary>
      <param name="source">The source.</param>
      <param name="targetType">Type of the target.</param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Attributes.OrderByAttribute">
      <summary>
        Attribute put on to Seeding classes to define
        in which order to process them.
      </summary>
    </member>
    <member name="P:App.Modules.All.Infrastructure.Attributes.OrderByAttribute.Key">
      <summary>
        Optional name of the class.
      </summary>
    </member>
    <member name="P:App.Modules.All.Infrastructure.Attributes.OrderByAttribute.After">
      <summary>
        The instruction to put this class before
        another item of either the specified key name,
        or decorated with one of these attributes, with the Key set.
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Actions.Actions.TODO">
      <summary>
        Beginning of string that
        App Settings are compared against
        during startup. Which throws error
        if not set.
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X10">
      <summary>
        Long enough to store an unsigned int of 4,294,967,295
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X32">
      <summary>
        Use for AccountName that have to be indexed.
        ie, used by CreatedBy, LastModifiedBy, DeletedBy
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X64">
      <summary>
        64. Use for Keys, Names
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X256">
      <summary>
        246. Use for FileNames (can be up to 1024, but Indexes must be less than 900 total, so start with this).
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X1024">
      <summary>
        Most *system* text should be this...unless user entered.
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Constants.Db.Schemas.TextFieldSizes.X2048">
      <summary>
        User Entered Short Descriptions.
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Contracts.IHasAllModulesInitializer">
      <summary>
        The initializer is for the whole app
        <para>
          A non-functional contract (more or less a 'tag')
          to help track down all the various initializers.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Contracts.IHasIgnoreThis">
      <summary>
        Contract that can be attached to classes that need to be ignored (eg: by Reflection)
        <para>
          Have used to ignore some Entity Framework Schema definitions, etc.
        </para>
      </summary>
    </member>
    <member name="P:App.Modules.All.Infrastructure.Contracts.IHasInitialized.Initialized">
      <summary>
        Is the object/service initialized?
        <para>
          See  <see cref="T:App.Modules.All.Infrastructure.Contracts.IHasResetInitialization" />
        </para>
        <para>
          Implementation Detail:
          for Service Configuration objects
          the Instance property most often is used to
          expose a private *static* filed.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Contracts.IHasModuleSpecificInitializer">
      <summary>
        The initializer is specific to a Module
        <para>
          A non-functional contract (more or less a 'tag')
          to help track down all the various initializers.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Contracts.IHasResetInitialization">
      <summary>
        <para>
          See  <see cref="T:App.Modules.All.Infrastructure.Contracts.IHasInitialized" />
          and <see cref="!:IHasInitialize" />
        </para>
        <para>
          Resets the flag behind <see cref="P:App.Modules.All.Infrastructure.Contracts.IHasInitialized.Initialized" />
          (which is often a static field)
        </para>
      </summary>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1">
      <summary>
        Abstract base class for a strategy to be applied when persisting changes.
        <para>
          Invoked when the Request is wrapping up,
          and invokes <see cref="!:IUnitOfWorkService" />'s
          commit operation,
          which in turn invokes each DbContext's SaveChanges,
          which are individually overridden, to in turn
          invoke <see cref="T:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService" />
          which invokes
          all PreCommitProcessingStrategy implementations, such
          as this.
        </para>
      </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._currentUser">
      <summary>
        The _current user (TODO: what, name? id?)
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._dbChangeTracker">
      <summary>
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._dbContext">
      <summary>
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._interfaceType">
      <summary>
        The interface the <see cref="!:DbEntityEntry.Entity" /> must match before the Strategy is applied.
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._nowUtc">
      <summary>
        The _now UTC
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.#ctor(App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService,App.Modules.Core.Infrastructure.Services.IPrincipalService,Microsoft.EntityFrameworkCore.EntityState[])">
      <summary>
        Initializes a new instance of the
        <see
          cref="T:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1" />
        class.
      </summary>
      <param name="principalService"></param>
      <param name="states">The states.</param>
      <param name="dateTimeService"></param>
    </member>
    <member
      name="P:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.InterfaceType">
      <summary>
        The interface the <see cref="!:DbEntityEntry.Entity" />
        must match before the Strategy is applied.
      </summary>
      <value></value>
    </member>
    <member
      name="P:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.States">
      <summary>
        The <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> the <see cref="!:DbEntityEntry.State" /> must match before the Strategy is applied.
      </summary>
      <value></value>
    </member>
    <member
      name="P:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.Enabled">
      <summary>
        Gets or sets a value indicating whether this object is enabled.
        <para>Member defined in<see cref="T:App.Modules.All.Shared.Models.IHasEnabled" /></para>
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.Process(Microsoft.EntityFrameworkCore.DbContext)">
      <summary>
        Processes the specified db change tracker,
        iterating through all the Entities in it,
        applying
        <see cref="T:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.IDbCommitPreCommitProcessingStrategy" />
        strategies that match.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.InspectDbEntityEntry(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
      <summary>
        Apply the strategy to the given <see cref="!:DbEntityEntry" />.
        <para>
        </para>
      </summary>
      <param name="dbEntityEntry">The <see cref="!:DbEntityEntry" />.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.GetEntityState(`0)">
      <summary>
        Gets the state of the entity.
      </summary>
      <param name="entity">The entity.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.IsEntityStateSet(`0,Microsoft.EntityFrameworkCore.EntityState)">
      <summary>
        Determines whether [is entity state set] [the specified entity].
      </summary>
      <param name="entity">The entity.</param>
      <param name="entityState">State of the entity.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1.PreProcessEntity(`0)">
      <summary>
        Process the entity before Persisting changes.
        <para>
          An example could be something like:
          <example>
            <code>
              <![CDATA[
            protected override void ProcessInternal(IHasDistributedIdentity entity) {
              IEnvironmentService environmentService = DependencyResolver.Current.GetInstance<IEnvironmentService>();
              entity.MachineId = environmentService.DeviceUniqueId;
            }
            ]]>
            </code>
          </example>
        </para>
      </summary>
      <param name="entity">The entity.</param>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._dateTimeService">
      <summary>
        The _date time service
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._principalService">
      <summary>
        The _principal service
      </summary>
    </member>
    <member
      name="F:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.DbContextPreCommitProcessingStrategyBase`1._states">
      <summary>
        The <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> the <see cref="!:DbEntityEntry.State" /> must match before the Strategy is applied.
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.IDbCommitPreCommitProcessingStrategy">
      <summary>
        Contract for implementations of
        Pre-Commit operations. Generally used
        to cleanup new an updated entities to be committed
        (add missing dates, etc.)
        <para>
          Invoked when the Request is wrapping up,
          and invokes <see cref="!:IUnitOfWorkService" />'s
          commit operation,
          which in turn invokes each DbContext's SaveChanges,
          which are individually overridden, to in turn
          invoke <see cref="!:IDbContextPreCommitService" />
          which invokes
          all PreCommitProcessingStrategy implementations, such
          as this.
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.CommitInterceptions.IDbCommitPreCommitProcessingStrategy.Process(Microsoft.EntityFrameworkCore.DbContext)">
      <summary>
        Processes the specified database context,
        looking for Entities that have characteristics
        that match criteria defined by this
        ProcessingStrategy implementation.
      </summary>
      <param name="dbContext">The database context.</param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase">
      <summary>
        This Module's specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
        <para>
          Note that it doesn't do much beyond reusing base
          functionality within <see cref="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase" />
          which ensures the name of the DbContext is specific
          to the Module Name (eg: 'Core' + 'DbContext' = 'CoreDbContext')
          and that it searches for implementations of
          <see
            cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.IHasModuleSpecificDbContextModelBuilderSchemaInitializer" />
          to create this Module's Database, and the searches for
          <see
            cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.MutableData.IHasModuleSpecificDbContextMutableDataSeedingInitializer" />
          to seed
          the database if and as required.
        </para>

      </summary>
      <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
    </member>
    <member name="P:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.ModuleName">
      <summary>
        Gets or sets the name of the logical module.
        <para>
          Will be Core, Foo, etc.
        </para>
      </summary>
    </member>
    <member name="P:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.DefaultConnectionStringName">
      <summary>
        Returns the default name of the ConnectionString
        used within config settings.
        <para>
          Used by
          <see cref="P:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.DefaultConnectionString" />
          to find itself in the Config file.
        </para>
      </summary>
    </member>
    <member name="P:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.DefaultConnectionString">
      <summary>
        Gets the default connection string
        for this DbContext.
      </summary>
      <value>
        The default connection string.
      </value>
    </member>
    <member name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.PrepareToSave">
      <summary>
        Prepares to save.
      </summary>
    </member>
    <member name="F:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase._migrationsApplied">
      <summary>
        The migrations applied
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.#ctor(Microsoft.Extensions.Configuration.IConfiguration,App.Modules.Core.Infrastructure.Services.IAppDbContextManagementService,Microsoft.EntityFrameworkCore.DbContextOptions{App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase})">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase" /> class.
        <para>
          This is the Constructor called by
          <see cref="T:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContextFactory" />,
          which is invoked when one invokes 'dotnet' frome the commandline.
        </para>
      </summary>
      <param name="configuration">The configuration.</param>
      <param name="appDbContextManagementService">The application database context management service.</param>
      <param name="options">The options.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.#ctor(Microsoft.Extensions.Configuration.IConfiguration,App.Modules.Core.Infrastructure.Services.IAppDbContextManagementService,System.Boolean)">
      <summary>
        This is the constructor invoked by the system's dependency injector/creator.
      </summary>
      <param name="configuration">The configuration.</param>
      <param name="appDbContextManagementService">The application database context management service.</param>
      <param name="isJointTable">if set to <c>true</c> [initialize model].</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.#ctor(Microsoft.Extensions.Configuration.IConfiguration,App.Modules.Core.Infrastructure.Services.IAppDbContextManagementService)">
      <summary>
        This is the constructor invoked by the system's dependency injector/creator.
      </summary>
      <param name="configuration"></param>
      <param name="appDbContextManagementService"></param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
      <summary>
        This is the constructor invoked from commandline when making migrations
        using the dotnet ef migrations etc...command.
      </summary>
      <param name="options"></param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase})">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase" /> class.
      </summary>
      <param name="options">The options.</param>
    </member>
    <member name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.Initialize">
      <summary>
        Invoked from Constructor.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
      <summary>
        Note: default behaviour is that it is not called by constructor by default.
        But is called by Migrate.
      </summary>
      <param name="optionsBuilder"></param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Override this method to further configure the model that was discovered by convention from the entity types
        exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
        and re-used for subsequent instances of your derived context.
      </summary>
      <param name="modelBuilder">
        The builder being used to construct the model for this context. Databases (and other extensions) typically
        define extension methods on this object that allow you to configure aspects of the model that are specific
        to a given database.
      </param>
      <remarks>
        If a model is explicitly set on the options for this context (via
        <see
          cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        )
        then this method will not be run.
      </remarks>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeDatabaseModelBuilders(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invokes the database model builders.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeDatabaseModelBuildersInCoreAssembly(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invokes the database model builders in core logical module.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeCoreDatabaseModelBuildersInThisAssembly(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invokes the core database model builders in this assembly.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeDatabaseModelBuildersInAssembly(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type)">
      <summary>
        Invokes the database model builders in assembly.
      </summary>
      <param name="modelBuilder">The model builder.</param>
      <param name="type">The type.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.IgnoreCoreEntitiesIfThisModuleIsNotCore(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Ignores the core entities if this module is not core.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.IgnoreCoreEntitiesInModule(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type)">
      <summary>
        Ignores the core entities if this module is not core.
        <para>
          This is really important when you create a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
          in a module. Every module other than Core has to pull ensure that
          any Core entities it's Modules (eg: SchoolModule entities)
          are Navigating to (maybe Core.User) don't cause the
          SchoolModule's DbContext
          to try to create those tables (they've already been created, in the
          Core Schema).
        </para>
      </summary>
      <param name="modelBuilder">The model builder.</param>
      <param name="type">The type.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeDatabaseModelBuildersInThisAssembliesForSeedingImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invokes the database model builders in this assemblies for seeding immutable data.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.EnsureMutableDataIsSeeded">
      <summary>
        Ensures the mutable (eg: Demo data) data is seeded.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.InvokeDatabaseSeedersInThisAssembly">
      <summary>
        Invokes the database seeders in this assembly.
      </summary>
    </member>
    <member name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.SaveChanges">
      <summary>
        Saves all changes made in this context to the database.
      </summary>
      <returns>
        The number of state entries written to the database.
      </returns>
      <remarks>
        This method will automatically call
        <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
        changes to entity instances before saving to the underlying database. This can be disabled via
        <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
      </remarks>
    </member>
    <member name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.SaveChanges(System.Boolean)">
      <summary>
        Saves all changes made in this context to the database.
      </summary>
      <param name="acceptAllChangesOnSuccess">
        Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" />
        is called after the changes have
        been sent successfully to the database.
      </param>
      <returns>
        The number of state entries written to the database.
      </returns>
      <remarks>
        This method will automatically call
        <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
        changes to entity instances before saving to the underlying database. This can be disabled via
        <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
      </remarks>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
      <summary>
        Asynchronously saves all changes made in this context to the database.
      </summary>
      <param name="acceptAllChangesOnSuccess">
        Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" />
        is called after the changes have
        been sent successfully to the database.
      </param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
      <returns>
        A task that represents the asynchronous save operation. The task result contains the
        number of state entries written to the database.
      </returns>
      <remarks>
        <para>
          This method will automatically call
          <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
          changes to entity instances before saving to the underlying database. This can be disabled via
          <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
        </para>
        <para>
          Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
          that any asynchronous operations have completed before calling another method on this context.
        </para>
      </remarks>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>
        Asynchronously saves all changes made in this context to the database.
      </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
      <returns>
        A task that represents the asynchronous save operation. The task result contains the
        number of state entries written to the database.
      </returns>
      <remarks>
        <para>
          This method will automatically call
          <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
          changes to entity instances before saving to the underlying database. This can be disabled via
          <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
        </para>
        <para>
          Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
          that any asynchronous operations have completed before calling another method on this context.
        </para>
      </remarks>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextFactoryBase`1">
      <summary>
        <para>
          Note that each logical Module requires it's own ModuleDbContext.
        </para>
      </summary>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.TenantFKAuditedRecordStatedTimestampedCustomIdDataConvention">
      <summary>
        Base Schema Definition
        for any Tenant specific Entity.
        <para>
          Adds the definition of
          TenantFK (but not a Tenant object)
          on top of
          Id, Timestamp, RecordState, CreatedOn/By, LastModifiedOn/By, DeletedOn/By
        </para>
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.UntenantedAuditedRecordStatedTimestampedGuidIdDataConvention" />
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.TenantFKAuditedRecordStatedTimestampedGuidIdReferenceDataConvention">
      <summary>
        Adds the definition of
        Enabled, Text, DisplayOrderHint, DisplayStyleHint
        on top of
        TenantFK (but not a Tenant object)
        on top of
        Id, Timestamp, RecordState, CreatedOn/By, LastModifiedOn/By, DeletedOn/By
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.TenantFKAuditedRecordStatedTimestampedGuidIdDataConvention" />
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.TenantFKKeyedAuditedRecordStatedTimestampedCustomIdReferenceDataConvention">
      <summary>
        Adds the definition of
        Enabled, Key, Text, DisplayOrderHint, DisplayStyleHint
        on top of
        TenantFK (but not a Tenant object)
        on top of
        Id, Timestamp, RecordState, CreatedOn/By, LastModifiedOn/By, DeletedOn/By
        <para>
          NOTE:
          I think the deciesion to not enherit from TenantedReferenceDataConventions
          was only done to control the order of columns (so that Key is *after*
          Enabled, rather than before).
          Feels a bit dumb now...
        </para>
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.TenantFKAuditedRecordStatedTimestampedGuidIdDataConvention" />
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.UntenantedAuditedRecordStatedTimestampedGuidIdReferenceDataConvention">
      <summary>
        Adds the definition of
        Enabled, Text, DisplayOrderHint, DisplayStyleHint
        on top of
        TenantFK (but not a Tenant object)
        on top of
        Id, Timestamp, RecordState, CreatedOn/By, LastModifiedOn/By, DeletedOn/By
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.Conventions.UntenantedAuditedRecordStatedTimestampedGuidIdDataConvention" />
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Schema.IHasModuleSpecificDbContextModelBuilderSchemaInitializer">
      <summary>
        Contract for Db ModelBuilders,
        common to all Modules.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Schema.IHasModuleSpecificDbContextModelBuilderSchemaInitializer.DefineSchema(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Defines the Module specific DbContext schema
        for a given entity.
        <para>
          Invoked at startup.
        </para>
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Data.Db.Schema.ModuleSpecificDbContextModelBuilderDefineBase">
      <summary>
        Base class
        for Defining a single entity within
        the given ModelBuilder of
        a specif Logical Module DbContext.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Schema.IHasModuleSpecificDbContextModelBuilderSchemaInitializer" />
    </member>
    <member
      name="P:App.Modules.All.Infrastructure.Data.Db.Schema.ModuleSpecificDbContextModelBuilderDefineBase.DefaultSchemaName">
      <summary>
        Gets or sets the default name of the schema
        (which is the same as the Logical Module).
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Schema.ModuleSpecificDbContextModelBuilderDefineBase.DefineSchema(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Defines the Module specific DbContext schema
        for a given entity.
        <para>
          Invoked at startup.
        </para>
      </summary>
      <param name="model">The model.</param>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.IHasModuleSpecificDbContextModelBuilderImmutableDataSeedingInitializer">
      <summary>
        Contract for initializing objects
        invoked by a logical Module's
        DbContext during migrations.
        <para>
          Used to set data that is considered
          part of the model (hence in the Migrations)
          that will not change.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Contracts.IHasModuleSpecificInitializer" />
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.IHasModuleSpecificDbContextModelBuilderImmutableDataSeedingInitializer.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase">
      <summary>
        Base class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.IHasModuleSpecificDbContextModelBuilderImmutableDataSeedingInitializer" />
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.Data.Db.Seeding.MutableData.IHasModuleSpecificDbContextMutableDataSeedingInitializer">
      <summary>
        Contract for Seeders that are optionally
        invoked, to seed optional demo data.
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Contracts.IHasModuleSpecificInitializer" />
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.Data.Db.Seeding.MutableData.IHasModuleSpecificDbContextMutableDataSeedingInitializer.SeedMutableData(App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase)">
      <summary>
        If and when invoked,
        seeds the given dbContext with
        mutable data (ie, optional/demo data).
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.DependencyResolution.AllModulesInfrastructureServiceRegistry">
      <summary>
        <para>
          Invoked by magic.
          ie, found because App.Host/DependencyInjection/ServiceRegistry
          had an 'LookForRegistries' statement.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.DependencyResolution.ApplicationDependencyResolutionInitializer">
      <summary>
        Class invoked from both of the following:
        * Startup's ConfigureContainer method (in App.Host)
        * <see cref="T:App.Modules.All.Infrastructure.DependencyResolution.DependencyResolutionContainerInitializer" />
        (when running UnitTests)
        to initialize all that is not specific to HTML.
      </summary>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.DependencyResolution.Conventions.NamedDbContextRegistrationConvention">
      <summary>
        A Custom Lamar initialization convention used
        to register Databases under their name.
      </summary>
    </member>
    <member
      name="T:App.Modules.All.Infrastructure.DependencyResolution.Conventions.ServiceConfigurationRegistrationConvention">
      <summary>
        Some services are configured using 'xxxConfiguration' objects,
        that are not backed by Interfaces -- but need to be
        registered as Singletons.

      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.DependencyResolution.DependencyResolutionContainerInitializer">
      <summary>
        Class invoked from UnitTesting to create a DI Container
        (ASP.Core does this behind the scenes, whereas UnitTests
        have to create their own Container).
        <para>
          The class then invokes the same shared Services initializer that
          ASP.Core uses.
        </para>
        <para>
          The class is here, rather than in the UnitTests
          so that it is this Assembly that References Lamar,
          rather than the UnitTest Assembly (and maybe gets out of
          version sequence).
        </para>
        TODO: Migrations may one day be wired up to use this.
      </summary>
    </member>
    <member
      name="P:App.Modules.All.Infrastructure.DependencyResolution.DependencyResolutionContainerInitializer.Container">
      <summary>
        The DI which this Initializer created.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.DependencyResolution.DependencyResolutionContainerInitializer.CreateConfiguration(Lamar.ServiceRegistry)">
      <summary>
        <para>
          Background:
          Whereas ASP.Core stuffs the serviceRegistry with IConfiguration,
          UnitTesting does not. So have to do this hack.
        </para>
      </summary>
      <param name="serviceRegistry"></param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBase">
      <summary>
        The base class for each Module's (Core, Module1, Module2, etc.) ServiceRegistry.
        <para>
          To avoid undesired side effects, It's important that each Module
          inherits from this Module as it is set up to only search for dependencies
          within this Module's group of assemblies (it's filtering on the Assembly name)
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBase.InnerScan(Lamar.Scanning.Conventions.IAssemblyScanner)">
      <summary>
        <para>
          Invoked by Constructor.
        </para>
        Override to provide Module/Assembly specific scanning rules.
      </summary>
      <param name="assemblyScanner">The assembly scanner.</param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase">
      <summary>
        Base class of serviceregistry's
        that are scoped to the current logical module's
        assemblies.
      </summary>
      <seealso cref="T:Lamar.ServiceRegistry" />
    </member>
    <member name="M:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase.#ctor">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase" /> class.
      </summary>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase.ScopeToModuleAssemblies(Lamar.Scanning.Conventions.IAssemblyScanner)">
      <summary>
        Scopes the scanner to this module's assemblies.
      </summary>
      <param name="assemblyScanner">The assembly scanner.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase.ConfigureForDefaultConventions(Lamar.Scanning.Conventions.IAssemblyScanner)">
      <summary>
        Configures the scanner to relate ISomething to Something.
      </summary>
      <param name="assemblyScanner">The assembly scanner.</param>
    </member>
    <member
      name="M:App.Modules.All.Infrastructure.DependencyResolution.ModuleServiceRegistryBaseBase.InnerScan(Lamar.Scanning.Conventions.IAssemblyScanner)">
      <summary>
        Override to define what to find
        and register
        within this logical Module's assemblies.
        <para>
          Not that it already been scoped to the
          logical module's assemblies.
        </para>
      </summary>
      <param name="assemblyScanner">The assembly scanner.</param>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Helpers.ElapsedTime">
      <summary>
        A Disposable class to help with logging the durations of operations.
        <para>
          Of value during the startup stage when tracing how long operations
          took, and what can be optimized.
        </para>
        <para>
          Also of use when recording integration operations. Again, useful
          for optimisation objectives.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.All.Infrastructure.Services.IInfrastructureService">
      <summary>
        Optional contract that all Domain Services
        should inherit from.
        <para>
          The contract does not add or enforce any functionality
          bar specifying a specific IoC Lifecycle (making it a Singleton
          by inheriting from
          <see cref="T:App.Modules.All.Shared.DependencyResolution.Lifecycles.IHasSingletonLifecycle" />)
          and allowing for filtering per Core/Module.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Shared.Services.ISystemService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Caching.DefaultTenancyCacheItem">
      <summary>
        Notice the Key. This is how it gets registered automatically.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Caching.DefaultTenancyCacheItem.#ctor(App.Modules.Core.Infrastructure.Services.IAzureRedisCacheService,App.Modules.Core.Infrastructure.Services.IObjectMappingService,App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext)">
      <summary>

      </summary>
      <param name="azureRedisCacheService"></param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Constants.KeyStores.Keys">
      <summary>
        Names of Keys within an KeyStore,
        where secrets were registered, in order to not have
        security credentials in the AppConfig.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Constants.Storage.QueueStorageContainers">
      <summary>
        Names of QueueStorage Containers,
        usually within the default StorageAccount
        (see <see cref="T:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames" />).
        <para>
          These known Containers are automatically
          created the first time
          <see cref="!:AppCoreAzureStorageDefaultQueueContext" />
          is invoked.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Constants.Storage.BlobStorageContainers">
      <summary>
        Names of BlobStorage Containers,
        usually within the default StorageAccount
        (see <see cref="T:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames" />).
        <para>
          These known Containers are automatically
          created the first time
          <see cref="!:AppCoreAzureStorageDefaultBlobContext" />
          is invoked.
        </para>
      </summary>
    </member>
    <member name="F:App.Modules.Core.Infrastructure.Constants.Storage.BlobStorageContainers.Public">
      <summary>
        Publicly accessible (Blob, not Container) storage.
        <para>
          Container names become parts of case sensitive urls.
          So make them lowercase.
        </para>
        <para>
          This Container is accessed via the
          <see cref="P:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames.Default" />
          service account.
        </para>
      </summary>
    </member>
    <member name="F:App.Modules.Core.Infrastructure.Constants.Storage.BlobStorageContainers.Private">
      <summary>
        AAD RBAC controlled access Container.
        <para>
          ie, whereas the 'public' blob can be accessed directly from the web
          this blob can only be accessed by the System.
        </para>
        <para>
          Container names become parts of case sensitive urls.
          So make them lowercase.
        </para>
        <para>
          This Container is accessed via the
          <see cref="P:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames.Default" />
          service account.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames">
      <summary>
        The Azure Resource Name of a Storage Account.
        <para>
          A System, or even a Module may use multiple Storage Accounts...but it's pretty
          uncommon. Generally, there's just need for StorageAccount
          (<see cref="T:App.Modules.Core.Infrastructure.Constants.Storage.StorageAccountNames" />),
          within which multiple Containers
          (<see cref="T:App.Modules.Core.Infrastructure.Constants.Storage.BlobStorageContainers" />)
          are developed.
        </para>
        <para>
          Remember -- one backs up Containers, not Accounts.
        </para>
      </summary>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.CommitInterceptions.Implementations.HasInRecordAuditabilityDbContextPreCommitStrategy">
      <summary>

        <para>
          Invoked when the Request is wrapping up,
          and invokes <see cref="!:IUnitOfWorkService" />'s
          commit operation,
          which in turn invokes each DbContext's SaveChanges,
          which are individually overridden, to in turn
          invoke <see cref="T:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService" />
          which invokes
          all PreCommitProcessingStrategy implementations, such
          as this.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Shared.Models.IHasInRecordAuditability" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext">
      <summary>
        This Module's specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
        <para>
          Note that it doesn't do much beyond reusing base
          functionality within <see cref="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase" />
          which ensures the name of the DbContext is specific
          to the Module Name (eg: 'Core' + 'DbContext' = 'CoreDbContext')
          and that it searches for implementations of
          <see cref="!:IHasAppModuleDbContextModelBuilderInitializer" />
          to create this Module's Database, and the searches for
          <see cref="!:IHasModuleSpecificDbContextMutableDataSeedingInitializer" /> to seed
          the database if and as required.
        </para>

      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext.#ctor(Microsoft.Extensions.Configuration.IConfiguration,App.Modules.Core.Infrastructure.Services.IAppDbContextManagementService,Microsoft.EntityFrameworkCore.DbContextOptions{App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase})">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.All.Infrastructure.Data.Db.Contexts.ModuleDbContextBase" /> class.
        <para>
          This is the Constructor called by
          <see cref="T:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContextFactory" />,
          which is invoked when one invokes 'dotnet' frome the commandline.
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext.#ctor(Microsoft.Extensions.Configuration.IConfiguration,App.Modules.Core.Infrastructure.Services.IAppDbContextManagementService)">
      <summary>
        This is the constructor invoked by the system's dependency injector/creator.
      </summary>
      <param name="configuration"></param>
      <param name="appDbContextManagementService"></param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
      <summary>
        <para>
          Note:
          Whereas the other constructors are invoked during run time,
          this contructor will be called by the
          <see cref="T:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContextFactory" />,
          which is invoked when the 'dotnet ef' commands are issued
          from the command line (eg, for Migrations).
        </para>
      </summary>
      <param name="options"></param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
      <summary>

        <para>
          Note:
          The override is not strictly required -- it's just here
          to bring attention to the work being done in the base class.
        </para>
      </summary>
      <param name="optionsBuilder"></param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Contexts.ModuleDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>

        <para>
          Note:
          The override is not strictly required -- it's just here
          to bring attention to the work being done in the base class.
        </para>
      </summary>
      <param name="modelBuilder"></param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableSeederDataClassification">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableSeederDataClassification.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederExceptionRecord">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederExceptionRecord.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederPrincipal">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederPrincipal.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederPrincipalCategory">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederPrincipalCategory.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederTenant">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederTenant.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederXXX">
      <summary>
        Class for
        seeding of immutable data
        as part of
        DbContext Migrations.
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederBase" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Data.Db.Seeding.ImmutableData.ModuleSpecificDbContextModelBuilderImmutableDataSeederXXX.DefineImmutableData(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <summary>
        Invoke to create immutable data
        as part of the current Migration.
      </summary>
      <param name="modelBuilder">The model builder.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Data.Db.Seeding.MutableData.DemoData.CoreModuleDbContextSeederExceptionRecord">
      <summary>
        Seeder invoked by <see cref="!:ModuleDbContextSeedingOrchestrator" />
      </summary>
      <seealso
        cref="T:App.Modules.All.Infrastructure.Data.Db.Seeding.MutableData.IHasModuleSpecificDbContextMutableDataSeedingInitializer" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Factories.KeyVaultClientFactory">
      <summary>
        <para>
          Depends on:
          Nuget:
          * Microsoft.Azure.KeyVault
          * Microsoft.IdentityModel.Clients.ActiveDirectory
          * PowerShell:
          * No longer needed: New-AzureRmADServicePrincipal -ApplicationId {Guid}
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultClientFactory.Build(App.Modules.Core.Shared.Configuration.Settings.AadApplicationRegistrationInformationConfigurationSettings)">
      <summary>
        Application's that use Azure KeyVault are hosted in Azure.
        Within Azure Application Registration, when registered, they get an Id.
        Which is automatically mapped to a Service Principal Name (SPN)
        (New-AzureRmADServicePrincipal -ApplicationId {Guid} is invoked behind the scene)
        (and for now think of it as a Pseudo User that this not visible in AAD Users).
        Then within KeyVault, access is granted to the SPN.
        When you sign in, you're using the AppClientId and AppSecret over a secure line.
        That's how Azure recognizes the app (as an SPN, not a proper User or Service Account).
        And hence why the App is given access to the KeyVault to retrieve secrets and keys.
      </summary>
      <param name="aadClientInfo"></param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultClientFactory.Build(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
      <summary>
        Builds the specified client, given credentials.
      </summary>
      <param name="clientCredential">The client credential.</param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory">
      <summary>
        A Factory to create a Configuration object
        and provision it from Key Vault Secrets
        with keys that match the names of the properties
        or <see cref="T:App.Modules.All.Shared.Attributes.AliasAttribute" /> they have been decorated with.
        <para>
          Used by the implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService" />
          .
        </para>
        <para>
          It's much more maintainable and practical
          to work with configuration objects
          of multiple related properties than multiple
          configuration values 'flying in close formation'.
          And they are also cachable, for better performance.
        </para>
        <para>
          When working on prem, Configuration settings
          are sourced directly from AppSettings using
          ConfigurationManager.
          When deployed to cloud, there's
          CloudConfigurationManager to handle a more layered
          approach. At least, that's the theory (if it worked).
          Rather than leave it in <see cref="T:App.Modules.Core.Infrastructure.Services.IHostSettingsService" />
          the access logic is externalized to this class.
        </para>
        This might be overkill...(and it doesn't work for now).
        On
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory.#ctor(App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService,App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory" /> class.
      </summary>
      <param name="diagnosticsTracingService">The diagnostics tracing service.</param>
      <param name="keyVaultService">The key vault service.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory.Create``1(System.String)">
      <summary>
        Instantiates a new blank target object,
        then
        <see
          cref="M:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory.Provision``1(``0,System.String,System.Boolean)" />
        's it's properties
        from host settings (ie AppSettings)
        with keys match the property's name, or any <see cref="T:App.Modules.All.Shared.Attributes.AliasAttribute" />
        the property has been decorated with.
      </summary>
      <typeparam name="T"></typeparam>
      <param name="prefix">The prefix.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory.Provision``1(``0,System.String,System.Boolean)">
      <summary>
        Provisions the specified target object's properties
        from host settings (ie AppSettings)
        with keys match the property's name, or any <see cref="T:App.Modules.All.Shared.Attributes.AliasAttribute" />
        the property has been decorated with.
      </summary>
      <typeparam name="T"></typeparam>
      <param name="target">The target object .</param>
      <param name="prefix">The prefix.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Factories.KeyVaultConfigurationObjectFactory.GetAppSetting(System.String)">
      <summary>
        Helper method to gets the application setting (as a string,
        to be subseqently Typed).
      </summary>
      <param name="key">The key.</param>
      <returns></returns>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedGuidIdBase`2">
      <summary>
        Base class for mapping
        between Dtos and Entities
        that have
        Timestamps (all Entities do),
        and RecordState (most entities do),
        and no Tenancy Id attribute,
        and not necessarily a defined Id
        (see a subclass for that).
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="TDto">The type of the dto.</typeparam>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedGuidIdBase`2.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{`0,`1})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedGuidIdBase`2.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{`1,`0})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedNoIdBase`2">
      <summary>
        Base class for mapping
        between Dtos and Entities
        that have
        Timestamps (all Entities do),
        and RecordState (most entities do),
        but no Tenancy Id attribute,
        and not necessarily a defined Id
        (see a subclass for that).
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="TDto">The type of the dto.</typeparam>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedNoIdBase`2.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{`0,`1})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapTenantedRecordStatedTimestampedNoIdBase`2.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{`1,`0})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2">
      <summary>
        Base class for mapping
        between Dtos and Entities
        that have
        Timestamps (all Entities do),
        and RecordState (most entities do),
        but no Tenancy Id attribute,
        and not necessarily a defined Id
        (see a subclass for that).
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="TDto">The type of the dto.</typeparam>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{`0,`1})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{`1,`0})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedTimestampedNoIdBase`2">
      <summary>
        Base class for mapping
        between Dtos and Entities
        that have
        Timestamps (all Entities do),
        and no Tenancy Id attribute,
        but not necessarily a defined Id
        (see a subclass for that).
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="TDto">The type of the dto.</typeparam>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedTimestampedNoIdBase`2.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{`0,`1})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedTimestampedNoIdBase`2.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{`1,`0})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.ObjectMap_TenantedReferenceType_TenantedReferenceTypeDto`2">
      <summary>
        Base class for mapping
        between
        ReferenceData
        Dtos and Entities
        that have
        Timestamps (all Entities do),
        and RecordState (most entities do),
        and Tenancy Id attribute,
        and Guid Id
      </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <typeparam name="TDto">The type of the dto.</typeparam>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.ObjectMap_TenantedReferenceType_TenantedReferenceTypeDto`2.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{`0,`1})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.ObjectMap_TenantedReferenceType_TenantedReferenceTypeDto`2.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{`1,`0})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationCreatorInformation_ApplicationProviderInformationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationCreatorInformation_ApplicationProviderInformationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Configuration.Settings.ApplicationCreatorInformationConfigurationSettings,App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationProviderInformationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationCreatorInformation_ApplicationProviderInformationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationProviderInformationDto,App.Modules.Core.Shared.Configuration.Settings.ApplicationCreatorInformationConfigurationSettings})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDescription_ApplicationDescriptionDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDescription_ApplicationDescriptionDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Configuration.Settings.ApplicationDescriptionConfigurationSettings,App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationDescriptionDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDescription_ApplicationDescriptionDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationDescriptionDto,App.Modules.Core.Shared.Configuration.Settings.ApplicationDescriptionConfigurationSettings})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDistributorInformation_ApplicationProviderInformationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDistributorInformation_ApplicationProviderInformationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Configuration.Settings.ApplicationDistributorInformationConfigurationSettings,App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationProviderInformationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ApplicationDistributorInformation_ApplicationProviderInformationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.ApplicationProviderInformationDto,App.Modules.Core.Shared.Configuration.Settings.ApplicationDistributorInformationConfigurationSettings})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ConfigurationStepRecord_ConfigurationStepRecordDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ConfigurationStepRecord_ConfigurationStepRecordDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord,App.Modules.Core.Shared.Models.Messages.API.V0100.ConfigurationStepRecordDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ConfigurationStepRecord_ConfigurationStepRecordDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.ConfigurationStepRecordDto,App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DataClassification_DataClassificationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DataClassification_DataClassificationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.DataClassification,App.Modules.Core.Shared.Models.Messages.API.V0100.DataClassificationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DataClassification_DataClassificationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.DataClassificationDto,App.Modules.Core.Shared.Models.Entities.DataClassification})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DiagnosticsTraceRecord_DiagnosticsTraceRecordDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DiagnosticsTraceRecord_DiagnosticsTraceRecordDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.DiagnosticsTraceRecord,App.Modules.Core.Shared.Models.Messages.API.V0100.DiagnosticsTraceRecordDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_DiagnosticsTraceRecord_DiagnosticsTraceRecordDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.DiagnosticsTraceRecordDto,App.Modules.Core.Shared.Models.Entities.DiagnosticsTraceRecord})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ExceptionRecord_ExceptionRecordDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ExceptionRecord_ExceptionRecordDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.ExceptionRecord,App.Modules.Core.Shared.Models.Messages.API.V0100.ExceptionRecordDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_ExceptionRecord_ExceptionRecordDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.ExceptionRecordDto,App.Modules.Core.Shared.Models.Entities.ExceptionRecord})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformationCountryRegion_GeoInfromationCountryRegionDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformationCountryRegion_GeoInfromationCountryRegionDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.GeoInformationCountryRegion,App.Modules.Core.Shared.Models.Messages.API.V0100.GeoInformationCountryRegionDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformationCountryRegion_GeoInfromationCountryRegionDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.GeoInformationCountryRegionDto,App.Modules.Core.Shared.Models.Messages.GeoInformationCountryRegion})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformation_GeoInfromationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformation_GeoInfromationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.GeoInformation,App.Modules.Core.Shared.Models.Messages.API.V0100.GeoInformationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_GeoInformation_GeoInfromationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.GeoInformationDto,App.Modules.Core.Shared.Models.Messages.GeoInformation})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_MediaMetadata_MediaMetadataDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_MediaMetadata_MediaMetadataDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.MediaMetadata,App.Modules.Core.Shared.Models.Messages.API.V0100.MediaMetadataDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_MediaMetadata_MediaMetadataDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.MediaMetadataDto,App.Modules.Core.Shared.Models.Entities.MediaMetadata})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_NavigationRoute_NavigationRouteDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_NavigationRoute_NavigationRouteDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.NavigationRoute,App.Modules.Core.Shared.Models.Messages.API.V0100.NavigationRouteDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_NavigationRoute_NavigationRouteDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.NavigationRouteDto,App.Modules.Core.Shared.Models.Entities.NavigationRoute})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Notification_NotificationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Notification_NotificationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.Notification,App.Modules.Core.Shared.Models.Messages.API.V0100.NotificationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Notification_NotificationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.NotificationDto,App.Modules.Core.Shared.Models.Entities.Notification})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalCategory_PrincipalCategoryDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalCategory_PrincipalCategoryDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.PrincipalCategory,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalCategoryDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalCategory_PrincipalCategoryDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalCategoryDto,App.Modules.Core.Shared.Models.Entities.PrincipalCategory})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalClaim_PrincipalClaimDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalClaim_PrincipalClaimDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.PrincipalClaim,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalClaimDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalClaim_PrincipalClaimDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalClaimDto,App.Modules.Core.Shared.Models.Entities.PrincipalClaim})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalLogin_PrincipalLoginDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalLogin_PrincipalLoginDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.PrincipalLogin,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalLoginDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalLogin_PrincipalLoginDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalLoginDto,App.Modules.Core.Shared.Models.Entities.PrincipalLogin})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalProperty_PrincipalPropertyDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalProperty_PrincipalPropertyDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.PrincipalProperty,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalPropertyDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalProperty_PrincipalPropertyDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalPropertyDto,App.Modules.Core.Shared.Models.Entities.PrincipalProperty})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalTag_PrincipalTagDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalTag_PrincipalTagDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.PrincipalTag,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalTagDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_PrincipalTag_PrincipalTagDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalTagDto,App.Modules.Core.Shared.Models.Entities.PrincipalTag})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_PrincipalDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_PrincipalDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.Principal,App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_PrincipalDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.PrincipalDto,App.Modules.Core.Shared.Models.Entities.Principal})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_UserProfileDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_UserProfileDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.Principal,App.Modules.Core.Shared.Models.Messages.API.V0100.UserProfileDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Principal_UserProfileDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.UserProfileDto,App.Modules.Core.Shared.Models.Entities.Principal})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SessionOperation_SessionOperationDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SessionOperation_SessionOperationDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.SessionOperation,App.Modules.Core.Shared.Models.Messages.API.V0100.SessionOperationDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SessionOperation_SessionOperationDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.SessionOperationDto,App.Modules.Core.Shared.Models.Entities.SessionOperation})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Session_SessionDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Session_SessionDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.Session,App.Modules.Core.Shared.Models.Messages.API.V0100.SessionDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Session_SessionDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.SessionDto,App.Modules.Core.Shared.Models.Entities.Session})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SystemRole_RoleDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SystemRole_RoleDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.SystemRole,App.Modules.Core.Shared.Models.Messages.API.V0100.RoleDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_SystemRole_RoleDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.RoleDto,App.Modules.Core.Shared.Models.Entities.SystemRole})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantClaim_TenantClaimDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantClaim_TenantClaimDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.TenantClaim,App.Modules.Core.Shared.Models.Messages.API.V0100.TenantClaimDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantClaim_TenantClaimDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.TenantClaimDto,App.Modules.Core.Shared.Models.Entities.TenantClaim})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantedNavigationRoute_TenantedNavigationRouteDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantedNavigationRoute_TenantedNavigationRouteDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.TenantedNavigationRoute,App.Modules.Core.Shared.Models.Messages.API.V0100.TenantedNavigationRouteDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantedNavigationRoute_TenantedNavigationRouteDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.TenantedNavigationRouteDto,App.Modules.Core.Shared.Models.Entities.TenantedNavigationRoute})">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantProperty_TenantPropertyDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantProperty_TenantPropertyDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.TenantProperty,App.Modules.Core.Shared.Models.Messages.API.V0100.TenantPropertyDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_TenantProperty_TenantPropertyDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.TenantPropertyDto,App.Modules.Core.Shared.Models.Entities.TenantProperty})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Tenant_TenantDto">
      <summary>
        Create custom Maps for the Entity and its Dto.
      </summary>
      <seealso
        cref="T:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.Base.MapUntenantedRecordStatedTimestampedNoIdBase`2" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Tenant_TenantDto.ConfigureMapFromEntityToDto(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Entities.Tenant,App.Modules.Core.Shared.Models.Messages.API.V0100.TenantDto})">
      <summary>
        Configures the map from entity to dto.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ObjectMapping.Messages.V0100.ObjectMap_Tenant_TenantDto.ConfigureMapFromDtoToEntity(AutoMapper.IMappingExpression{App.Modules.Core.Shared.Models.Messages.API.V0100.TenantDto,App.Modules.Core.Shared.Models.Entities.Tenant})">
      <summary>
        Configures the map from dto to entity.
      </summary>
      <param name="mappingExpression">The mapping expression.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.ServiceAgents.Implementations.AppCoreAzureStorageDefaultBlobContext.#ctor(App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService,App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService)">
      <summary>
        Initializes a new instance of the
        <see
          cref="T:App.Modules.Core.Infrastructure.ServiceAgents.Implementations.AppCoreAzureStorageDefaultBlobContext" />
        class.
      </summary>
      <param name="keyVaultService">The key vault service.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Caches.Implementations.HostSettingsServiceConfigurationObjectCache">
      <summary>
        Static cache that is injected into
        IHostSettingsService.
      </summary>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Caches.Implementations.KeyVaultServiceConfigurationObjectCache">
      <summary>
        Static cache object injected into KeyVault Service.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject">
      <summary>
        Not sure if there is any benefit being able to reflect for Configuration
        objects per Module, but just in case.

      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.IServiceConfigurationObject" />
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.ApplicationInformationServiceConfiguration">
      <summary>
        Configuration object to be injected into the
        implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.IApplicationInformationService" />
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from
          <see cref="T:App.Modules.All.Shared.DependencyResolution.Lifecycles.IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration">
      <summary>
        Configuration object to be injected into the
        implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService" />
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration.KeyStandardNameComponentDivider">
      <summary>
        Gets or sets the standard key divider character ('-').
        <para>
          Whereas AppHost keys can contain ':', etc. -- KeyVault cannot, so
          they must be converted to this character (eg: '-', or '_', or maybe even '')
        </para>
      </summary>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration.KeyIllegalCharacters">
      <summary>
        Gets or sets the key illegal characters.
        <para>
          Whereas AppHost keys can contain ':', etc. -- KeyVault cannot, so
          they must be converted to this character (eg: '-', or '_', or maybe even '')
        </para>
      </summary>
      <value>
        The key illegal characters.
      </value>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration.ResourceName">
      <summary>
        Gets the name of the KeyVault Resource.
        <para>
          If not defined in AppSettings using
          <see
            cref="F:App.Modules.Core.Shared.Constants.ConfigurationKeys.AppCoreIntegrationAzureKeyVaultStoreResourceName" />
          will fall back to value provided by
          <see cref="F:App.Modules.Core.Shared.Constants.ConfigurationKeys.AppCoreIntegrationAzureCommonResourceName" />
        </para>
      </summary>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration.KeyPrefix">
      <summary>

      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration.#ctor(App.Modules.Core.Infrastructure.Services.IHostSettingsService)">
      <summary>
        Initializes a new instance of the
        <see
          cref="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration" />
        class.
        <para>
          Note that this one of the only settings that goes directly to HostSettingsService.
        </para>
      </summary>
      <param name="hostSettingsService">The host settings service.</param>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.DictionaryBasedMimeTypeServiceConfiguration">
      <summary>
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.DictionaryBasedMimeTypeServiceConfiguration.Cache">
      <summary>
        Gets the
        case insensitive
        cache of file name extensions (with prefix '.') to mime type.
      </summary>
      <value>
        The cache.
      </value>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureDocumentDbServiceConfiguration">
      <summary>

        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureDocumentDbServiceConfiguration.#ctor(App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService)">
      <summary>
        Initializes a new instance of the <see cref="!:DocumentDbServiceConfiguration" /> class.
      </summary>
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.MediaMalwareDetectionServiceConfiguration">
      <summary>
        Configuration object to be injected into the
        implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.IMediaMalwareDetectionService" />
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member
      name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.MediaMetadataServiceConfiguration">
      <summary>
        Configuration object to be injected into the
        implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.IMediaMetadataService" />
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Configuration.Implementations.SMTPServiceConfiguration">
      <summary>
        Configuration object to be injected into the
        implementation of <see cref="T:App.Modules.Core.Infrastructure.Services.ISmtpService" />
        <para>
          Inherits from
          <see cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
          whic inherits from <see cref="!:IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Configuration.IServiceConfigurationObject">
      <summary>
        Contract to be applied to all Service Configuration Objects
        <para>
          Dependency Injectors work primarily with objects(there are some esoteric exceptions, but generally
          most DIs can inject objects into objects into objects -- all based on the Parameter Types of each
          classes Constructor -- but get stumped when a constructor argument is a Value type (string, int, etc.)
          not knowing where to find the needed string.
        </para>
        <para>
          The common solution is to use Configuration Object that are easiliy discoverable by the
          Dependency Injector. We pack them with the strings/ints needed, and the DI happily injects the whole
          object/egg into the target service.Done.
        </para>
        <para>
          It also solves other problems.The first being that OO always expected us to work with Objects, so the
          code becomes more mature/maintainable (rather than loose bits/pieces flying in close formation),
          and secondly, the ConfigurationObject in itself is injectable...so can be injected with other services
          (eg: IHostSettingsService) to configure the strings/ints on its own, like a big boy...
        </para>
        <para>
          Inherits from <see cref="T:App.Modules.All.Shared.DependencyResolution.Lifecycles.IHasSingletonLifecycle" />
          to hint at startup that the Configuration object should be
          IoC registered for the duration of the application (not the thread).
          as some configuration hits remote services (eg: Azure KeyVault)
          which would be rather slow.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Shared.DependencyResolution.Lifecycles.IHasSingletonLifecycle" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IApplicationInformationService">
      <summary>
        Contract for an Infrastructure Service to
        manage information about the System.
        <para>
          The most common use is for rendering information
          in the header of application interfaces.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IApplicationSettingsService">
      <summary>
        Contract for an Infrastructure Service to
        manage mutable settings
        shared across all Modules of the system.
        <para>
          As they are mutable, they cannot be cached in-mem per machine.
          Consider using Redis Cache after recording changes using the RepositoryService.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAuthenticationMsiTokenService">
      <summary>
        Contract for an Infrastructure Service to
        retrieve MSI (Microsoft's Secure Identity...dumb acronym!)
        Tokens.
        <para>
          The Token can be used to access KeyVault, Databases and other
          Azure services that have been made MSI compatible.
        </para>
        <para>
          When working with a Dev station, the token is built around the
          developer's choice of Identities (usually one that has been associated
          to the target Org's AD). When working in the cloud, the identity
          will be automatically developed when the AppService was first installed.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAuthenticationService">
      <summary>
        Contract for an Infrastructure Service to
        Authenticate a User
        against an internal Store.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAuthenticationService.Authenticate(System.String,System.String)">
      <summary>
        Authenticate a user's credentials - but only if the
        app is persisting Principal credentials, which it REALLY
        should NOT be doing.
      </summary>
      <param name="nameCredential"></param>
      <param name="passwordCredential"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAuthorisationService">
      <summary>
        Contract for an Infrastructure Service to
        Query whether the current Thread's Principal
        is Authorised to perform specific Operations.
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IAuthorisationService.HasRoles(System.String[])">
      <summary>
        Determines whether the current thread Principal has roles claims.
      </summary>
      <param name="roles">The roles.</param>
      <returns>
        <c>true</c> if the specified roles has roles; otherwise, <c>false</c>.
      </returns>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IAuthorisationService.HasScope(System.String)">
      <summary>
        Determines whether the current thread Principal has scope.
      </summary>
      <param name="scope">The scope.</param>
      <returns>
        <c>true</c> if the specified scope has scope; otherwise, <c>false</c>.
      </returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureBlobStorageService">
      <summary>
        Contract for an Infrastructure Service to
        manage access to Azure Storage Accounts
        and the Storage Containers and Blobs within.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureCognitiveServicesComputerVisionService">
      <summary>

      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService">
      <summary>
        Contract for an INfrastructure Service
        to manage interactions with Azure DocumentDB
        databases, collections and documents.
        <para>
          Note that by default DocumentDB automatically assigns a unique
          string id to a document. If you want you take over the creation
          of these keys, either create your document objects with a string id
          (and set it using a sequential Guid, developed in the constructor)
          or decorate an existing property (which may have a different name or case)
          with `[JsonProperty(PropertyName = "id")]`
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.CreateDatabase(System.String,System.Boolean)">
      <summary>
        Creates the defined database if it does not already exist.
      </summary>
      <param name="databaseId">The database identifier.</param>
      <param name="throwExceptionIfAlreadyExisting">if set to <c>true</c>, throws an exception if the database already existing.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.CreateDatabaseAsync(System.String,System.Boolean)">
      <summary>
        Creates the defined database if it does not already exist.
      </summary>
      <param name="databaseId">The database identifier.</param>
      <param name="throwExceptionIfAlreadyExisting">if set to <c>true</c>, throws an exception if the database already existing.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.GetDocumentCollectionIds(System.String)">
      <summary>
        Gets the list of ids of existing document collections.
      </summary>
      <param name="databaseId">The database identifier.</param>
      <returns>an array of document ids.</returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.CreateDocumentCollection(System.String,System.String,System.Boolean,System.String[],System.Int32)">
      <summary>
        Creates the document collection if it does not already exist.
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="throwExceptionIfAlreadyExists">if set to <c>true</c>, throw an exception if the document collection already exists.</param>
      <param name="keyColumnNames">The single or composite unique column name(s).</param>
      <param name="offerThroughput">The offer throughput.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.CreateDocumentCollectionAsync(System.String,System.String,System.Boolean,System.String[],System.Int32)">
      <summary>
        Creates the document collection if it does not already exist.
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="throwExceptionIfAlreadyExists">if set to <c>true</c>, throw an exception if the document collection already exists.</param>
      <param name="keyColumnNames">The single or composite unique column name(s).</param>
      <param name="offerThroughput">The offer throughput.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.GetDocumentCount(System.String,System.String)">
      <summary>
        Gets the count of the documents in the specified documentCollection.
      </summary>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <returns></returns>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.GetDocumentCount(System.Uri)">
      <summary>
        Gets the count of the documents in the specified documentCollection.
      </summary>
      <param name="documentUri">The document URI.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.SaveDocument``1(System.String,System.String,``0)">
      <summary>
        Saves the object/document for the first time.
        <para>
          The 'document' can be any class.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="document">The document to save.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.SaveDocumentAsync``1(System.String,System.String,``0)">
      <summary>
        Saves the object/document for the first time.
        <para>
          The 'document' can be any class.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="document">The document to save.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.SaveDocumentAsync``1(System.Uri,``0)">
      <summary>
        Saves the object/document for the first time.
        <para>
          The 'document' can be any class.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="collectionLinkUri">The collection link URI.</param>
      <param name="document">The document.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.GetDocumentAsync``1(System.String,System.String,System.Func{``0,System.Boolean})">
      <summary>
        Retrieve a single document/object.
        <para>
          The 'document' can be any class, queried using a predicate of either its properties,
          or a addendum storage attribute.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="predicate">The predicate.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.GetDocumentAsync``1(System.Uri,System.Func{``0,System.Boolean})">
      <summary>
        Retrieve a single document/object.
        <para>
          The 'document' can be any class, queried using a predicate of either its properties,
          or a addendum storage attribute.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="collectionLinkUri">The collection link URI.</param>
      <param name="predicate">The predicate.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.UpdateDocumentAsync``1(System.String,System.String,System.String,``0,System.Boolean)">
      <summary>
        Persists the updated document/object.
        <para>
          The 'document' can be any class.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="documentId">The document identifier.</param>
      <param name="updatedDocument">The updated document.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.UpdateDocumentAsync``1(System.String,System.String,``0,System.Uri,System.Boolean)">
      <summary>
        Persists the updated document/object.
        <para>
          The 'document' can be any class.
        </para>
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <param name="databaseId">The database identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="documentUri">The document self link.</param>
      <param name="updatedDocument">The updated document.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteAllDocuments(System.String,System.String)">
      <summary>
        Deletes all documents.
      </summary>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteAllDocumentsAsync(System.String,System.String)">
      <summary>
        Deletes all documents asynchronous.
      </summary>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocument``1(System.String,System.String,``0,System.Boolean)">
      <summary>
        Deletes the document/object.
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <param name="document">The document.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentAsync``1(System.String,System.String,``0,System.Boolean)">
      <summary>
        Deletes the document/object.
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <param name="document">The document.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentAsync(System.Uri,System.Boolean)">
      <summary>
        Deletes the document/object.
        <para>
          Note that the default pk property is a lowercase string 'id' property.
        </para>
      </summary>
      <param name="documentUri">The document self link.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentCollection(System.String,System.String,System.Boolean)">
      <summary>
        Deletes the document collection.
      </summary>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentCollectionAsync(System.String,System.String,System.Boolean)">
      <summary>
        Deletes the document collection.
      </summary>
      <param name="documentId">The document identifier.</param>
      <param name="collectionId">The collection identifier.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentCollection(System.Uri,System.Boolean)">
      <summary>
        Deletes the document collection.
      </summary>
      <param name="collectionUri">The collection URI.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureDocumentDBService.DeleteDocumentCollectionAsync(System.Uri,System.Boolean)">
      <summary>
        Deletes the document collection asynchronous.
      </summary>
      <param name="collectionUri">The collection URI.</param>
      <param name="throwExceptionIfNotFound">if set to <c>true</c> [throw exception if not found].</param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService">
      <summary>
        Base Contract for an Infrastructure Service to
        to manage access to an Azure KeyVault.
      </summary>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.CleanKeyName(System.String)">
      <summary>
        Gets or sets the standard key divider character ('-').
        <para>
          Whereas AppHost keys can contain ':', etc. -- KeyVault cannot, so
          they must be converted to this character (eg: '-', or '_', or maybe even '')
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.RetrieveKeyAsync(System.String,System.String)">
      <summary>
        ???
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="vaultUrl">The vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.RetrieveSecretAsync(System.String,System.String)">
      <summary>
        Retrieves the secret given a key.
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="vaultUrl">The vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.SetSecretAsync(System.String,System.String,System.String)">
      <summary>
        Sets a secret.
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="secret">The secret.</param>
      <param name="vaultUrl">The vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.GetSecretsAsync(System.Boolean,System.Int32,System.String)">
      <summary>
        Gets the secrets.
      </summary>
      <param name="returnFQIdentifier">if set to <c>true</c> [return fq identifier].</param>
      <param name="pageSize">Size of the page.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.ListSecretKeysAsync(System.Boolean,System.Int32,System.String)">
      <summary>
        Lists the secrets keys.
      </summary>
      <param name="returnFQIdentifier">if set to <c>true</c> [return fq identifier].</param>
      <param name="pageSize">Size of the page.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService.GetObject``1(System.String,System.String)">
      <summary>
        Create a Configuration object and fill properties from KeyVault Secrets with the same name.
        <para>
          Note that default values are not provided if the property value = default(T)
        </para>
      </summary>
      <typeparam name="T"></typeparam>
      <param name="prefix">The prefix.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureQueueStorageService">
      <summary>
        Base Contract for an Infrastructure Service to
        to manage access to an Azure Queue Storage.
        <para>
          Azure Queue storage is a service for storing large numbers of messages.
          Assessible via authenticated HTTPS calls.
          A single queue message can be up to 64 KB in size, and a queue can contain millions of messages.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IAzureDeploymentEnvironmentService">
      <summary>
        Contract for a service to retrieve information about
        the current deployment environment.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IAzureDeploymentEnvironmentService.SubscriptionId">
      <summary>
        The Key to the Subscription within which
        this system was deployed to.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IAzureDeploymentEnvironmentService.ResourceGroupName">
      <summary>
        The name of the ResourceString to which thi
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ICacheItemService">
      <summary>
        Base contract for an Infrastructure Service to
        Cache information.
        <para>
          Only suitable for Immutable information.
          Consider Redis Cache Service for Muttable information
          shared between devices.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ICertSignService">
      <summary>
        Contract for an Infrastructure Service to
        Sign data.
        <para>
          Use to sign OperationLog entries.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IConfigurationStepService">
      <summary>
        Contract for an Infrastructure Service to
        manage the recording of Setup Configuration Steps
        that can later be queried by Application and Infrastructure
        Support Speialists, via appropriate APIs.
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IConfigurationStepService.Register(App.Modules.Core.Shared.Models.Messages.ConfigurationStepType,App.Modules.Core.Shared.Models.Messages.ConfigurationStepStatus,System.String,System.String)">
      <summary>
        Registers the specified <see cref="T:App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord" />.
      </summary>
      <param name="type">The type.</param>
      <param name="status">The status.</param>
      <param name="title">The title.</param>
      <param name="description">The description.</param>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IConfigurationStepService.Get">
      <summary>
        Gets the (mem) cached <see cref="T:App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord" />s.
        <para>
          Invoked via the Service Facade.
        </para>
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IConversionService">
      <summary>
        Contract for an Infrastructure Service to
        to convert types to alternate types.
        <para>
          Refer to implementations of
          <see cref="T:App.Modules.Core.Infrastructure.Services.IHostSettingsService" />
          that use it to convert settings for persistence
          in datastores, and back again. It's used in other
          places too (front end conversion).
        </para>
      </summary>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IConversionService.ConvertTo``1(System.Object,``0)">
      <summary>
        Convert one type to another, falling back to the
        provided default Type if the value is null.
      </summary>
      <typeparam name="T">The target Type</typeparam>
      <param name="source">The source object</param>
      <param name="defaultValue">The default target value</param>
      <returns></returns>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IConversionService.GetDefaultValue(System.Type)">
      <summary>
        Get the default value of the provided Type.
        If the Type is a Value object it will be its default value,
        If it is an object, it will be null.
      </summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService">
      <summary>
        Contract for an Infrastructure Service to
        pre-process all new/updated/modified entities
        belonging to a specific DbContext, before
        they are saved.
        <para>
          This service implementation is invoked because
          the various DbContext implementations (eg: AppDbContext)
          override their SaveChanges method to do so
          TODO: currently it's not automatically handled from the IUnitOfWorkService implementation.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService.PreProcess(Microsoft.EntityFrameworkCore.DbContext)">
      <summary>
        Pass all entities belonging to the specified DbContext
        through all implementations of
        <see cref="!:IDbCommitPreCommitProcessingStrategy" />
      </summary>
      <param name="dbContext">The database context.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IDependencyResolutionService">
      <summary>
        Contract for an injectable app specific service to
        solve dependencies, while
        not causing downstream assemblies to have to take a
        reference to the Microsoft Common ServiceLocator
        or even the singleton AppDependencyLocator.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService">
      <summary>
        Contract for an Infrastructure Service to
        provide diagnostic tracing services.
        <para>
          In Azure these trace messages would probably be recored to
          Blob storage.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IDictionaryBasedMimeTypeService">
      <summary>
        Contract for an Infrastructure Service to
        provide Mime information.
        <para>
          Of use by MediaUploadServices as well as SMTP (attachment) services.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IHostSettingsService">
      <summary>
        Contract for an common Infrastructure Service to
        manage Host specific, immutable Settings
        (commonly this wraps web.config, etc. settings
        that were injected at deployment time by the
        Build Engine).
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IImmutableSetingsService" />
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IHostSettingsService.GetObject``1(System.String)">
      <summary>
        Create a Configuration object and fill properties from Host Settings with the same name.
        <para>
          Note that default values are not provided if the property value = default(T)
        </para>
      </summary>
      <typeparam name="T"></typeparam>
      <param name="prefix"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IHttpContextService">
      <summary>
        Contract for a Service to get hold of the
        HttpContext.
        <para>
          Warning: do not access/use this service directly (use it through IOperationContextService, etc.)
        </para>
        <para>
          Warning for relying too heavily on it as it is not available
          when running outside of a web server.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IImmutableSetingsService">
      <summary>
        Base class for <see cref="T:App.Modules.Core.Infrastructure.Services.IMutableSettingsService" />
      </summary>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IImmutableSetingsService.Get``1(System.String,``0)">
      <summary>
        Return a single Host Setting, typed.
      </summary>
      <typeparam name="T"></typeparam>
      <param name="key"></param>
      <param name="defaultValue"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IJsonService">
      <summary>
        Instead of dragging references to Newtonsoft all over your app...
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IMemoryCachingService">
      <summary>
        Base contract for an Infrastructure Service to
        Cache information.
        <para>
          Only suitable for Immutable information.
          Consider Redis Cache Service for Muttable information
          shared between devices.
        </para>
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.ApplicationInformationService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IApplicationInformationService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IApplicationInformationService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AuthenticationMsiTokenService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IAuthenticationMsiTokenService" />
        Infrastructure Service Contract
        <para>
          The Token can be used to access KeyVault, Databases and other
          Azure services that have been made MSI compatible.
        </para>
        <para>
          When working with a Dev station, the token is built around the
          developer's choice of Identities (usually one that has been associated
          to the target Org's AD). When working in the cloud, the identity
          will be automatically developed when the AppService was first installed.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Implementations.Base.AppCoreServiceBase" />
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IAuthenticationMsiTokenService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AuthenticationService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IAuthenticationService" />
        Infrastructure Service Contract
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AuthorisationService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IAuthorisationService" />
        Infrastructure Service Contract
        to Query whether the current Thread's Principal
        is Authorised to perform specific Operations.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IAuthorisationService" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AuthorisationService.#ctor(App.Modules.Core.Infrastructure.Services.IPrincipalService)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.AuthorisationService" /> class.
      </summary>
      <param name="principalService">The principal service.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AuthorisationService.HasRoles(System.String[])">
      <summary>
        Determines whether the current thread Principal has roles claims.
      </summary>
      <param name="roles">The roles.</param>
      <returns>
        <c>true</c> if the specified roles has roles; otherwise, <c>false</c>.
      </returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AuthorisationService.HasScope(System.String)">
      <summary>
        Determines whether the current thread Principal has scope.
      </summary>
      <param name="scope">The scope.</param>
      <returns>
        <c>true</c> if the specified scope has scope; otherwise, <c>false</c>.
      </returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureBlobStorageService">
      <summary>
        Dependencies:
        * Nuget Packages:
        * WindowsAzure.Storage" version="8.6.0"
        * Microsoft.sAzure.ConfigurationManager" version="3.2.3"
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureBlobStorageService.GetStorageAccountContext(System.String)">
      <summary>
        Use Service Locator to return specified context.
      </summary>
      <param name="storageAccountContextKey">The storage account context key.</param>
      <returns></returns>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureDeploymentEnvironmentService.SubscriptionId">
      <summary>
        The Key to the Subscription within which
        this system was deployed to.
      </summary>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureDeploymentEnvironmentService.ResourceGroupName">
      <summary>
        The name of the ResourceString to which thi
      </summary>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureDeploymentEnvironmentService.ResourceGroupLocation">
      <summary>
        The name of the ResourceString to which thi
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IAzureKeyVaultService" />
        Infrastructure Service Contract.
        <para>
          Application's that use Azure KeyVault are hosted in Azure.
          Within Azure Application Registration, when registered, they get an Id.
          Which is automatically mapped to a Service Principal Name (SPN)
          (New-AzureRmADServicePrincipal -ApplicationId {Guid} is invoked behind the scene)
          (and for now think of it as a Psuedo User that this not visible in AAD Users).
          Then within KeyVault, access is granted to the SPN.
          When you sign in, you're using the AppClientId and AppSecret over a secure line.
          That's how Azure recognizes the app (as an SPN, not a proper User or Service Account).
          And hence why the App is given acces to the KeyVault to retrieve secrets and keys.
        </para>
        <para>
          Depends on:
          Nuget:
          * Microsoft.Azure.KeyVault
          * Microsoft.IdentityModel.Clients.ActiveDirectory
          * NOTE: Which relieas on ADAL, as oposed to the newer MSAL...
          * PowerShell:
          * No longer needed: New-AzureRmADServicePrincipal -ApplicationId {Guid}
        </para>
      </summary>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.Configuration">
      <summary>
        Gets the configuration object for this service.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.#ctor(App.Modules.Core.Infrastructure.Services.Configuration.Implementations.AzureConfiguration.AzureKeyVaultServiceConfiguration,App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService,App.Modules.Core.Infrastructure.Services.IHostSettingsService,App.Modules.Core.Infrastructure.Services.IConfigurationStepService)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService" />
        class.
      </summary>
      <param name="azureKeyVaultServiceConfiguration">The azure key vault service configuration.</param>
      <param name="diagnosticsTracingService">The diagnostics tracing service.</param>
      <param name="hostSettingsService">The host settings service.</param>
      <param name="configurationStepService"></param>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.KeyVaultClient">
      <summary>
        Gets the key vault client.
        <para>
          Note that this is just an authenticated client.
          It is not associated to a specific keyvault
          (you need to provide that when you request a key).
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.RetrieveKeyAsync(System.String,System.String)">
      <summary>
        Applications that use a key vault must authenticate by using a token from Azure Active Directory.
        The application must first register the application in their Azure Active Directory,
        get the ApplicationId and AuthenticationKey (the shared secret).
        clientID and clientSecret are obtained by registering
        the application in Azure AD
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.RetrieveSecretAsync(System.String,System.String)">
      <summary>
        Retrieves the secret.
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.SetSecretAsync(System.String,System.String,System.String)">
      <summary>
        Sets the secret.
      </summary>
      <param name="secretKey">The secret key.</param>
      <param name="secret">The secret.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.GetSecretsAsync(System.Boolean,System.Int32,System.String)">
      <summary>
        Gets the secrets.
      </summary>
      <param name="returnFQIdentifier">if set to <c>true</c> [return fq identifier].</param>
      <param name="pageSize">Size of the page.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.ListSecretKeysAsync(System.Boolean,System.Int32,System.String)">
      <summary>
        Lists the secrets keys.
      </summary>
      <param name="returnFQIdentifier">if set to <c>true</c> [return fq identifier].</param>
      <param name="pageSize">Size of the page.</param>
      <param name="keyVaultUrl">The key vault URL.</param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.GetObject``1(System.String,System.String)">
      <summary>
        Create a Configuration object and fill properties from KeyVault Secrets with the same name.
        <para>
          Note that default values are not provided if the property value = default(T)
        </para>
      </summary>
      <typeparam name="T"></typeparam>
      <param name="prefix"></param>
      <param name="keyVaultUrl"></param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureKeyVaultService.CleanKeyName(System.String)">
      <summary>
        Gets or sets the standard key divider character ('-').
        <para>
          Whereas AppHost keys can contain ':', etc. -- KeyVault cannot, so
          they must be converted to this character (eg: '-', or '_', or maybe even '')
        </para>
      </summary>
      <param name="key"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureQueueStorageService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IAzureQueueStorageService" />
        Infrastructure Service Contract
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.AzureServices.AzureQueueStorageService.GetStorageAccountContext(System.String)">
      <summary>
        Use Service Locator to return specified context.
      </summary>
      <param name="storageAccountContextKey">The storage account context key.</param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.Base.AppCoreServiceBase">
      <summary>
        Abstract base classs for all Core Infrastructure Services.
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.CertSignService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ICertSignService" />
        Infrastructure Service Contract
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IConfigurationStepService" />
        Infrastructure Service Contract
        <para>
          Implementation of the Infrastructure Service Contract to
          manage the recording of Setup Configuration Steps
          that can later be queried by Application and Infrastructure
          Support Speialists, via appropriate APIs.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IConfigurationStepService" />
    </member>
    <member name="F:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService._cache">
      <summary>
        Host Specific, in-mem cache.
        TODO: May need something more resilient when we get to a load-balanced, multi-host environment. To watch...
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService.#ctor(App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService,App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService" /> class.
      </summary>
      <param name="universalDateTimeService">The universal date time service.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService.Register(App.Modules.Core.Shared.Models.Messages.ConfigurationStepType,App.Modules.Core.Shared.Models.Messages.ConfigurationStepStatus,System.String,System.String)">
      <summary>
        Registers the specified <see cref="T:App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord" />.
      </summary>
      <param name="type">The type.</param>
      <param name="status">The status.</param>
      <param name="title">The title.</param>
      <param name="description">The description.</param>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.Implementations.ConfigurationStepService.Get">
      <summary>
        Gets the (mem) cached <see cref="T:App.Modules.Core.Shared.Models.Messages.ConfigurationStepRecord" />s.
        <para>
          Invoked via the Service Facade.
        </para>
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.ConversionService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IConversionService" />
        Infrastructure Service Contract

      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IConversionService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.DbContextPreCommitService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService" />
        Infrastructure Service Contract
        to pre-process all new/updated/modified entities
        belonging to a specific DbContext, before
        they are saved.
        <para>
          This service implementation is invoked because
          the various DbContext implementations (eg: AppDbContext)
          override their SaveChanges method to do so
          TODO: currently it's not automatically handled from the IUnitOfWorkService implementation.
        </para>
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IDbContextPreCommitService" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.DbContextPreCommitService.#ctor(App.Modules.Core.Infrastructure.Services.IDependencyResolutionService)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.DbContextPreCommitService" /> class.
      </summary>
      <param name="dependencyResolutionService">The dependency resolution service.</param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.DbContextPreCommitService.PreProcess(Microsoft.EntityFrameworkCore.DbContext)">
      <summary>
        Pass all entities belonging to the specified DbContext
        through all implementations of
        TODO
      </summary>
      <param name="dbContext">The database context.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.DependencyLocator">
      <summary>
        See: https://dotnetcoretutorials.com/2018/05/06/servicelocator-shim-for-net-core/
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.DiagnosticsTracingService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IDiagnosticsTracingService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.DictionaryBasedMimeTypeService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IDictionaryBasedMimeTypeService" />
        Infrastructure Service Contract
      </summary>
      <internal>
        See: http://stackoverflow.com/questions/1029740/get-mime-type-from-filename-extension
      </internal>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.DictionaryBasedMimeTypeService.#ctor(App.Modules.Core.Infrastructure.Services.Configuration.Implementations.DictionaryBasedMimeTypeServiceConfiguration)">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.DictionaryBasedMimeTypeService" /> class.
      </summary>
      <param name="dictionaryBasedMimeTypeServiceConfiguration">The dictionary based MIME type service configuration.</param>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.DictionaryBasedMimeTypeService.Configuration">
      <summary>
        Gets or sets the configuration used by this service.
        <para>
          The Configuration object is shared between instances of
          this service, therefore should only be modified as per the application's needs
          during Bootstrapping, and no later.
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.DictionaryBasedMimeTypeService.GetMimeTypeFromFileExtension(System.String)">
      <summary>
        Gets the MIME type from the given file extension.
      </summary>
      <param name="fileNameExtensionWithPrefixDot">
        The file name extension (with prefix dot) as is returned with
        Path.GetExtension().
      </param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.JsonService">
      <summary>
        Instead of dragging references to Newtonsoft all over your app...
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.LocalisationService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ILocalisationService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ILocalisationService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.MediaMalwareDetectionService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IMediaMalwareDetectionService" />
        Infrastructure Service Contract
        to validate whether an uploaded stream is malware or not.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.MediaMetadataService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IMediaMetadataService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IMediaMetadataService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.MediaUploadService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IMediaUploadService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IMediaUploadService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.MemoryCachingService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ICacheItemService" />
        Infrastructure Service Contract
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.ObjectMappingService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IObjectMappingService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IObjectMappingService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.OIDCNotificationHandlerService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IOIDCNotificationHandlerService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IOIDCNotificationHandlerService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.OperationContextService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IOperationContextService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IOperationContextService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalManagmentService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IPrincipalManagmentService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IPrincipalManagmentService" />
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalManagmentService.CreateIfNotExists(System.String,System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>

      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IPrincipalService" />
        Infrastructure Service Contract
        to work with the current thread Principal.
        It does not work with any datastorage (ie it does not know how to
        retrieve a Principal record from the database). For that, use the
        PrincipalRecordService.
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.Implementations.Base.AppCoreServiceBase" />
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IPrincipalService" />
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentIdentity">
      <summary>
        Gets the current identity.
      </summary>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.#ctor">
      <summary>
        Initializes a new instance of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService" /> class.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentPrincipalName">
      <summary>
        Gets the current thread's Principal's NameIdentifier (not same as ObjectIdElementId).
      </summary>
      <value>
        The name of the current.
      </value>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.IsAuthenticated">
      <summary>
        Gets a value indicating whether this
        thread's Principal is authenticated.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentPrincipal">
      <summary>
        Gets the current Thread's <see cref="T:System.Security.Claims.ClaimsPrincipal" />.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.HasRequiredScopes(System.String,System.String)">
      <summary>
        Validate the current thread Principal has the necessary scopes.
      </summary>
      <param name="permission">The permission.</param>
      <param name="scopeElement">The scope element.</param>
      <returns>
        <c>true</c> if [has required scopes] [the specified permission]; otherwise, <c>false</c>.
      </returns>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentPrincipalIdentifier">
      <summary>
        Gets the current thread's Principal's
        Object/Record Identifier
        (not same as NameIdentifier).
      </summary>
      <value>
        The current principal identifier.
      </value>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentPrincipalIdentifierGuid">
      <summary>
        Gets the current principal record identifier
        as a Guid (if it can be parsed.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.UniqueSessionIdentifier">
      <summary>
        A unique Id assigned from the issuing Token
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.CurrentSessionIdentifier">
      <summary>
        The FK to the current Session Record.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.IsInRole(System.String[])">
      <summary>
        Determines whether the
        Current Principal has the specified Role(s).
      </summary>
      <param name="roles">One or more roles.</param>
      <returns></returns>
    </member>
    <member
      name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.ClaimPreferredCultureCode">
      <summary>
        Gets or sets the current identity's preferred Culture Id.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.PrincipalService.PrincipalTenantKey">
      <summary>
        The Key of the Tenant of the current Security Principal (ie, the Tenant Key within a Claim of the Thread current
        Principal)
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SecureAPIMessageAttributeService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISecureAPIMessageAttributeService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISecureAPIMessageAttributeService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SecureDataTokenService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISecureDataTokenService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISecureDataTokenService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SessionOperationLogService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISessionOperationLogService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISessionOperationLogService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SessionService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISessionService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISessionService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SmtpService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISmtpService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISmtpService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.StorageService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IStorageService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IStorageService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.SystemRoleRecordManagmentService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ISystemRoleRecordManagmentService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ISystemRoleRecordManagmentService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.TelemetrySevice">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ITelemetryService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ITelemetryService" />
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.TenantService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.ITenantService" />
        Infrastructure Service Contract
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.ITenantService" />
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.Implementations.TenantService.CurrentTenant">
      <summary>
        The current Tenant (ie, the start of the Url)
        <para>
          Used to set the resource' appearance (skin header/logo/footer, etc.)
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.TenantService.SetTenantFromUrl(System.String,System.String)">
      <summary>
        <para>
          Inovked by Middleware Module
          (before Routing gets involved)
        </para>
      </summary>
      <param name="tenantKeyOrPath"></param>
      <param name="hostName"></param>
      <returns></returns>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.Implementations.TenantService.IsValidTenantKey(System.String,System.String)">
      <summary>
        <para>
          Can be invoked by Route Condition
          to verify that first part of route is valid.
          (note that when done from there,
          this will be the same as what was resolved
          within the Middleware, when it set the Tenancy).
        </para>
        <para>
          If invoked from another location, will be slower.
        </para>
      </summary>
      <param name="tenantKey"></param>
      <param name="hostName"></param>
      <returns></returns>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.Implementations.TenantService.GetContextCache">
      <summary>
        Gets the list of cached Resources retrieved during this request:
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Implementations.UniversalDateTimeService">
      <summary>
        Implementation of the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService" />
        Infrastructure Service Contract
        for an infrastructure service to
        return UTC based DateTimeOffset (not just UTC DateTimeOffset,
        and certainly not Local DateTime!)
        to all services that need to coordinate datetime in a
        geo-capable manner (which you certainly need to do when
        you are hosting some infrastructure in one timezone,
        and other pieces in another).
      </summary>
      <seealso cref="T:App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService" />
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.Implementations.UniversalDateTimeService.NowUtc">
      <summary>
        Return the DateTimeOffset, in UTC.
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IMutableSettingsService">
      <summary>
        Base class for Application,  Tier, Module, Organisation, Principal settings
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IOIDCNotificationHandlerService.OnAuthenticationSuccess(App.Modules.Core.Shared.Models.Messages.AuthenticationSuccessMessage)">
      <summary>
        shared logic between
      </summary>
      <param name="authenticationSuccessMessage"></param>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IOIDCNotificationHandlerService.SecurityTokenValidated(App.Modules.Core.Shared.Models.Messages.AuthenticationSuccessMessage)">
      <summary>
        Cookie based
      </summary>
      <param name="authenticationSuccessMessage"></param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IOperationContextService">
      <summary>
        Contract for a service that manages variables
        within the current Operation's context. In a web app, that's
        equivalent to the HttpContext.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IPrincipalManagmentService">
      <summary>
        Contract for a service to manage Principal *Records*
        (not the same thing as what the
        <see cref="T:App.Modules.Core.Infrastructure.Services.IPrincipalService" /> does,
        which is really only concerned with managing the Principal
        on the current Thread.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IPrincipalManagmentService.Get(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>
        Gets the Principal, based on the Key/Id the
        external IdP uses to reference the user (won't be the
        same as the Principal record's Id).
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IPrincipalService">
      <summary>
        Contract for an infrastructure service to
        work with the current thread Principal.
        It does not work with any datastorage (ie it does not know how to
        retrieve a Principal record from the database). For that, use the
        PrincipalRecordService.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.CurrentPrincipal">
      <summary>
        Gets the current Thread's <see cref="T:System.Security.Claims.ClaimsPrincipal" />.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.CurrentPrincipalName">
      <summary>
        Gets the current thread's Principal's NameIdentifier (not same as ObjectIdElementId).
      </summary>
      <value>
        The name of the current.
      </value>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.UniqueSessionIdentifier">
      <summary>
        A unique Id assigned from the issuing Token
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.CurrentPrincipalIdentifier">
      <summary>
        Gets the current thread's Principal's Object/Record Identifier (not same as NameIdentifier).
      </summary>
      <value>
        The current principal identifier.
      </value>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.CurrentPrincipalIdentifierGuid">
      <summary>
        Gets the current principal record identifier
        as a Guid (if it can be parsed.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.CurrentSessionIdentifier">
      <summary>
        The FK to the current Session Record.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.IsAuthenticated">
      <summary>
        Gets a value indicating whether this
        thread's Principal is authenticated.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.ClaimPreferredCultureCode">
      <summary>
        Gets or sets the current identity's preferred Culture Id.
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.IPrincipalService.PrincipalTenantKey">
      <summary>
        The Key of the Tenant of the current Security Principal (ie, the Tenant Key within a Claim of the Thread current
        Principal)
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.IPrincipalService.HasRequiredScopes(System.String,System.String)">
      <summary>
        Validate the current thread Principal has the necessary scopes.
      </summary>
      <param name="permission">The permission.</param>
      <param name="scopeElement">The scope element.</param>
      <returns>
        <c>true</c> if [has required scopes] [the specified permission]; otherwise, <c>false</c>.
      </returns>
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IPrincipalService.IsInRole(System.String[])">
      <summary>
        Determines whether the
        Current Principal has the specified Role(s).
      </summary>
      <param name="roles">One or more roles.</param>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ISessionOperationLogService">
      <summary>
        Contract for an Infrastructure Service to
        record the current <see cref="T:App.Modules.Core.Shared.Models.Entities.SessionOperation" />
        log that will be Committed at the end of the
        Request (delayed so that it can record the Response Code).
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.ISessionOperationLogService.Current">
      <summary>
        Return the current Request Context's OperationLog record.
        <para>
          Creates a new one if this is the first request for the OperationLog.
        </para>
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ISystemRoleRecordManagmentService">
      <summary>
        Service to manage the Record of Roles associated
        to <see cref="T:App.Modules.Core.Shared.Models.Entities.Principal" /> records.
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.ISystemRoleRecordManagmentService.GetSystemRoleByDataStoreId(System.Guid)">
      <summary>
        Gets a System (ie, universal across Tenants) Role
      </summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ITenantService">
      <summary>
        A service contract to manage Tenants.
        <para>
          Important: there are always two Tenants: the Tenant that owns the Resource being requested
          and the Principal's Session Tenant. A Principal can be within
        </para>
      </summary>
    </member>
    <member name="P:App.Modules.Core.Infrastructure.Services.ITenantService.CurrentTenant">
      <summary>
        The Tenant the current Request's Resource belongs to (ie, the start of the Url)
        <para>
          Used to set the resource' appearance (skin header/logo/footer, etc.)
        </para>
      </summary>
    </member>
    <member
      name="M:App.Modules.Core.Infrastructure.Services.ITenantService.IsValidTenantKey(System.String,System.String)">
      <summary>
        Determines if given text is a valid Tenant Unique Key
        <para>
          Invoked by Routing to determine if first part of MVC/WebAPI route is a Tenant Key.
        </para>
      </summary>
      <returns></returns>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.ITransientLocalFileStorageService">
      <summary>
        Contract for a service to store files
        on the host.
        THIS IS ONLY VALID FOR LOCAL DEBUGGING AS CLOUD SERVICES
        DO NOT GUARANTEE THAT THE APP IS RESTARTED ON THE SAME
        SERVER (both a source of bug and security issues)
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService">
      <summary>
        Contract for an infrastructure service to
        return UTC based DateTimeOffset (not just UTC DateTimeOffset,
        and certainly not Local DateTimeOffset!)
        to all services that need to coordinate datetime in a
        geo-capable manner (which you certainly need to do when
        you are hosting some infrastructure in one timezone,
        and other pieces in another).
      </summary>
      <seealso cref="T:App.Modules.All.Infrastructure.Services.IInfrastructureService" />
    </member>
    <member name="M:App.Modules.Core.Infrastructure.Services.IUniversalDateTimeService.NowUtc">
      <summary>
        Return the DateTimeOffset, in UTC.
      </summary>
    </member>
    <member name="T:App.Modules.Core.Infrastructure.Services.Messages.PlantUmlDiagramRenderingResult">
      <summary>
        A response object from the Application's Infrastructure service

      </summary>
    </member>
  </members>
</doc>