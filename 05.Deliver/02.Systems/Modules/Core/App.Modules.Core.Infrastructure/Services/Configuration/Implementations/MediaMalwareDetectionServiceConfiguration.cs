using App.Modules.Core.Configuration.Settings;
using App.Modules.Core.Infrastructure.Clients;
using App.Modules.Core.Shared.Contracts;

namespace App.Modules.Core.Infrastructure.Services.Configuration.Implementations
{
    /// <summary>
    /// Configuration object to be injected into the
    /// implementation of <see cref="IMediaMalwareDetectionService" /><para>
    /// Inherits from <see cref="ICoreServiceConfigurationObject" />
    /// whic inherits from <see cref="IHasSingletonLifecycle" />
    /// to hint at startup that the Configuration object should be
    /// IoC registered for the duration of the application (not the thread).
    /// as some configuration hits remote services (eg: Azure KeyVault)
    /// which would be rather slow.
    /// </para>
    /// </summary>
    /// <seealso cref="App.Modules.Core.Infrastructure.Services.Configuration.ICoreServiceConfigurationObject" />
    public class MediaMalwareDetectionServiceConfiguration : ICoreServiceConfigurationObject
    {
        public readonly ScaniiClient ScaniiClient;

        public MediaMalwareDetectionServiceConfiguration(IDiagnosticsTracingService diagnosticsTracingService, IAzureKeyVaultService keyVaultService)
        {
            var configuration = keyVaultService.GetObject<ScaniiHostConfiguration>();

            this.Key = configuration.Key;
            this.Secret = configuration.Secret;
            this.BaseUri = configuration.BaseUri;


            this.ScaniiClient = new ScaniiClient(diagnosticsTracingService,
                configuration.Key,
                configuration.Secret,
                configuration.BaseUri);
        }

        public string Key { get; private set; }
        public string Secret { get; private set; }
        public string BaseUri { get; private set; }
    }
}