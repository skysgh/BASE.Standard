// <auto-generated />
using System;
using App.Modules.Core.Infrastructure.Data.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Modules.Core.Infrastructure.Migrations
{
    [DbContext(typeof(ModuleDbContext))]
    [Migration("20190428022039_TenantPrincipal")]
    partial class TenantPrincipal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.DataClassification", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(32768);

                    b.Property<int>("DisplayOrderHint");

                    b.Property<string>("DisplayStyleHint")
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_DataClassification_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_DataClassification_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_DataClassification_RecordState");

                    b.HasIndex("Title")
                        .HasName("IX_DataClassification_Title");

                    b.ToTable("DataClassifications","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.DataToken", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(32768);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_DataToken_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_DataToken_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_DataToken_RecordState");

                    b.HasIndex("TenantFK")
                        .HasName("IX_DataToken_TenantFK");

                    b.ToTable("DataTokens","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.ExceptionRecord", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<int>("RecordState");

                    b.Property<string>("Stack")
                        .IsRequired();

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32768);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_ExceptionRecord_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_ExceptionRecord_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_ExceptionRecord_RecordState");

                    b.ToTable("ExceptionRecords","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<DateTime>("DateTimeCreatedUtc");

                    b.Property<DateTime?>("DateTimeReadUtc");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<Guid>("PrincipalFK");

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsFixedLength(false);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("From")
                        .HasName("IX_Notification_From");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_Notification_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_Notification_LastModifiedOnUtc");

                    b.HasIndex("PrincipalFK")
                        .HasName("IX_Notification_PrincipalFK");

                    b.HasIndex("RecordState")
                        .HasName("IX_Notification_RecordState");

                    b.ToTable("Notifications","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Principal", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CategoryFK");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<int?>("DataClassificationFK");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("EnabledBeginningUtc");

                    b.Property<DateTime?>("EnabledEndingUtc");

                    b.Property<string>("FullName")
                        .HasMaxLength(128);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CategoryFK");

                    b.HasIndex("DataClassificationFK");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_Principal_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_Principal_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_Principal_RecordState");

                    b.ToTable("Principals","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalCategory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrderHint");

                    b.Property<string>("DisplayStyleHint");

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalCategory_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalCategory_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalCategory_RecordState");

                    b.ToTable("PrincipalCategories","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalClaim", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("AuthoritySignature")
                        .IsRequired()
                        .HasMaxLength(32768);

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalFK");

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("Authority")
                        .HasName("IX_PrincipalClaim_Authority");

                    b.HasIndex("Key")
                        .HasName("IX_PrincipalClaim_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalClaim_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalClaim_LastModifiedOnUtc");

                    b.HasIndex("PrincipalFK");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalClaim_RecordState");

                    b.ToTable("PrincipalClaims","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalLogin", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<bool>("Enabled");

                    b.Property<string>("IdPLogin")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastLoggedInUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalFK");

                    b.Property<int>("RecordState");

                    b.Property<string>("SubLogin")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasAlternateKey("IdPLogin", "SubLogin")
                        .HasName("IX_PrincipalLogin_IdpLoginSubLogin");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalLogin_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalLogin_LastModifiedOnUtc");

                    b.HasIndex("PrincipalFK");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalLogin_RecordState");

                    b.ToTable("PrincipalLogins","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalProperty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalFK");

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .HasName("IX_PrincipalProperty_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProperty_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProperty_LastModifiedOnUtc");

                    b.HasIndex("PrincipalFK");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProperty_RecordState");

                    b.ToTable("PrincipalProperties","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalTag", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrderHint");

                    b.Property<string>("DisplayStyleHint")
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalTag_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalTag_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalTag_RecordState");

                    b.HasIndex("Title")
                        .HasName("IX_PrincipalTag_Title");

                    b.ToTable("PrincipalTags","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalTagAssignment", b =>
                {
                    b.Property<Guid>("PrincipalFK");

                    b.Property<Guid>("TagFK");

                    b.Property<string>("CreatedByPrincipalId");

                    b.Property<DateTime?>("CreatedOnUtc");

                    b.Property<string>("DeletedByPrincipalId");

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("LastModifiedByPrincipalId");

                    b.Property<DateTime?>("LastModifiedOnUtc");

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("PrincipalFK", "TagFK");

                    b.HasIndex("TagFK");

                    b.ToTable("PrincipalTagAssignments","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Session", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalFK");

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasAlternateKey("UniqueIdentifier")
                        .HasName("IX_Session_UniqueIdentifier");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_Session_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_Session_LastModifiedOnUtc");

                    b.HasIndex("PrincipalFK");

                    b.HasIndex("RecordState")
                        .HasName("IX_Session_RecordState");

                    b.ToTable("Sessions","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.SessionOperation", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ActionArguments")
                        .IsRequired();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("BeginDateTimeUtc");

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<TimeSpan>("Duration");

                    b.Property<DateTimeOffset>("EndDateTimeUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<string>("ResourceTenantKey");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("SessionFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(32768);

                    b.HasKey("Id");

                    b.HasIndex("ActionName")
                        .HasName("IX_SessionOperation_ActionName");

                    b.HasIndex("ControllerName")
                        .HasName("IX_SessionOperation_ControllerName");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_SessionOperation_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_SessionOperation_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_SessionOperation_RecordState");

                    b.HasIndex("SessionFK");

                    b.ToTable("SessionOperations","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.SystemRole", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<int?>("DataClassificationFK");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<string>("ModuleKey");

                    b.Property<Guid?>("PrincipalId");

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DataClassificationFK");

                    b.HasIndex("Key")
                        .HasName("IX_SystemRole_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_SystemRole_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_SystemRole_LastModifiedOnUtc");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("RecordState")
                        .HasName("IX_SystemRole_RecordState");

                    b.ToTable("SystemRoles","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySecurityProfilePermission", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(32768);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_TenancySecurityProfilePermission_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_TenancySecurityProfilePermission_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_TenancySecurityProfilePermission_RecordState");

                    b.HasIndex("TenantFK")
                        .HasName("IX_TenancySecurityProfilePermission_TenantFK");

                    b.HasIndex("Title")
                        .HasName("IX_TenancySecurityProfilePermission_Title");

                    b.ToTable("TenancySecurityProfilePermissions","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.MediaMetadata", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("ContentSize");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<int>("DataClassificationFK");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<DateTime?>("LatestScanDateTimeUtc");

                    b.Property<bool?>("LatestScanMalwareDetetected");

                    b.Property<string>("LatestScanResults");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("RecordState");

                    b.Property<string>("SourceFileName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UploadedDateTimeUtc");

                    b.HasKey("Id");

                    b.HasAlternateKey("LocalName")
                        .HasName("IX_MediaMetadata_LocalName");

                    b.HasIndex("ContentHash")
                        .HasName("IX_MediaMetadata_ContentHash");

                    b.HasIndex("DataClassificationFK");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_MediaMetadata_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_MediaMetadata_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_MediaMetadata_RecordState");

                    b.HasIndex("SourceFileName")
                        .HasName("IX_MediaMetadata_SourceFileName");

                    b.ToTable("MediaMetadatas","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfile", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CategoryFK");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<int?>("DataClassificationFK");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("EnabledBeginningUtc");

                    b.Property<DateTime?>("EnabledEndingUtc");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CategoryFK");

                    b.HasIndex("DataClassificationFK");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProfile_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProfile_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProfile_RecordState");

                    b.HasIndex("TenantFK")
                        .HasName("IX_PrincipalProfile_TenantFK");

                    b.ToTable("PrincipalProfiles","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileCategory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrderHint");

                    b.Property<string>("DisplayStyleHint");

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProfileCategory_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProfileCategory_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProfileCategory_RecordState");

                    b.HasIndex("TenantFK")
                        .HasName("IX_PrincipalProfileCategory_TenantFK");

                    b.ToTable("PrincipalProfileCategories","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileClaim", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("AuthoritySignature")
                        .IsRequired()
                        .HasMaxLength(32768);

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalProfileFK");

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasAlternateKey("PrincipalProfileFK", "Key")
                        .HasName("IX_PrincipalProfileClaim_CompositeIndex");

                    b.HasIndex("Authority")
                        .HasName("IX_PrincipalProfileClaim_Authority");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProfileClaim_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProfileClaim_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProfileClaim_RecordState");

                    b.ToTable("PrincipalProfileClaims","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileProperty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<Guid>("PrincipalProfileFK");

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasAlternateKey("PrincipalProfileFK", "Key")
                        .HasName("IX_PrincipalProfileProperty_CompositeIndex");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProfileProperty_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProfileProperty_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProfileProperty_RecordState");

                    b.HasIndex("TenantFK")
                        .HasName("IX_PrincipalProfileProperty_TenantFK");

                    b.ToTable("PrincipalProfileProperties","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileTag", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrderHint");

                    b.Property<string>("DisplayStyleHint")
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_PrincipalProfileTag_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_PrincipalProfileTag_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_PrincipalProfileTag_RecordState");

                    b.HasIndex("Title")
                        .HasName("IX_PrincipalProfileTag_Title");

                    b.ToTable("PrincipalProfileTags","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileTagAssignment", b =>
                {
                    b.Property<Guid>("TenantPrincipalFK");

                    b.Property<Guid>("TagFK");

                    b.Property<string>("CreatedByPrincipalId");

                    b.Property<DateTime?>("CreatedOnUtc");

                    b.Property<string>("DeletedByPrincipalId");

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("LastModifiedByPrincipalId");

                    b.Property<DateTime?>("LastModifiedOnUtc");

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("TenantPrincipalFK", "TagFK");

                    b.HasIndex("TagFK");

                    b.ToTable("PrincipalProfileTagAssignment");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<int?>("DataClassificationFK");

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("Enabled");

                    b.Property<string>("HostName")
                        .HasMaxLength(64);

                    b.Property<bool?>("IsDefault");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DataClassificationFK");

                    b.HasIndex("DisplayName")
                        .HasName("IX_Tenant_DisplayName");

                    b.HasIndex("Key")
                        .HasName("IX_Tenant_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_Tenant_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_Tenant_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_Tenant_RecordState");

                    b.ToTable("Tenants","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenantClaim", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("AuthoritySignature")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("Authority")
                        .HasName("IX_TenantClaim_Authority");

                    b.HasIndex("Key")
                        .HasName("IX_TenantClaim_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_TenantClaim_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_TenantClaim_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_TenantClaim_RecordState");

                    b.HasIndex("TenantFK");

                    b.ToTable("TenantClaims","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenantProperty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("CreatedOnUtc")
                        .IsRequired();

                    b.Property<string>("DeletedByPrincipalId")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("DeletedOnUtc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("LastModifiedByPrincipalId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .IsRequired();

                    b.Property<int>("RecordState");

                    b.Property<Guid>("TenantFK");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .HasName("IX_TenantProperty_Key");

                    b.HasIndex("LastModifiedByPrincipalId")
                        .HasName("IX_TenantProperty_LastModifiedByPrincipalId");

                    b.HasIndex("LastModifiedOnUtc")
                        .HasName("IX_TenantProperty_LastModifiedOnUtc");

                    b.HasIndex("RecordState")
                        .HasName("IX_TenantProperty_RecordState");

                    b.HasIndex("TenantFK");

                    b.ToTable("TenantProperties","Core");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Principal", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.PrincipalCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Modules.Core.Shared.Models.Entities.DataClassification", "DataClassification")
                        .WithMany()
                        .HasForeignKey("DataClassificationFK");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalClaim", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal")
                        .WithMany("Claims")
                        .HasForeignKey("PrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalLogin", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal")
                        .WithMany("Logins")
                        .HasForeignKey("PrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalProperty", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal")
                        .WithMany("Properties")
                        .HasForeignKey("PrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.PrincipalTagAssignment", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal", "Principal")
                        .WithMany("TagAssignment")
                        .HasForeignKey("PrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Modules.Core.Shared.Models.Entities.PrincipalTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Session", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.SessionOperation", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Session")
                        .WithMany("Operations")
                        .HasForeignKey("SessionFK");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.SystemRole", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.DataClassification", "DataClassification")
                        .WithMany()
                        .HasForeignKey("DataClassificationFK");

                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Principal")
                        .WithMany("Roles")
                        .HasForeignKey("PrincipalId");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.MediaMetadata", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.DataClassification", "DataClassification")
                        .WithMany()
                        .HasForeignKey("DataClassificationFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfile", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Modules.Core.Shared.Models.Entities.DataClassification", "DataClassification")
                        .WithMany()
                        .HasForeignKey("DataClassificationFK");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileClaim", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfile")
                        .WithMany("Claims")
                        .HasForeignKey("PrincipalProfileFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileProperty", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfile")
                        .WithMany("Properties")
                        .HasForeignKey("PrincipalProfileFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileTagAssignment", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfileTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Modules.Core.Shared.Models.Entities.TenancySpecific.PrincipalProfile", "TenantPrincipal")
                        .WithMany("TagAssignments")
                        .HasForeignKey("TenantPrincipalFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.Tenant", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.DataClassification", "DataClassification")
                        .WithMany()
                        .HasForeignKey("DataClassificationFK");
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenantClaim", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Tenant")
                        .WithMany("Claims")
                        .HasForeignKey("TenantFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Modules.Core.Shared.Models.Entities.TenantProperty", b =>
                {
                    b.HasOne("App.Modules.Core.Shared.Models.Entities.Tenant")
                        .WithMany("Properties")
                        .HasForeignKey("TenantFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
