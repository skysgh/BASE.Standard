// Copyright MachineBrains, Inc. 2019

using App.Modules.All.Infrastructure.Configuration;
using App.Modules.All.Shared.Attributes;
using App.Modules.All.Shared.Attributes.Enums;
using App.Modules.All.Shared.DependencyResolution.Lifecycles;
using App.Modules.All.Shared.Models;
using App.Modules.Core.Infrastructure.ServiceAgents.Implementations.Scanii;
using App.Modules.Core.Infrastructure.Services;
using App.Modules.Core.Shared.Constants;

namespace App.Modules.Core.Infrastructure.Configuration.Services
{
    /// <summary>
    ///     Configuration object to be injected into the
    ///     implementation of <see cref="IMediaMalwareDetectionService" />
    ///     <para>
    ///         Inherits from <see cref="IConfigurationObject" />
    ///         whic inherits from <see cref="IHasSingletonLifecycle" />
    ///         to hint at startup that the Configuration object should be
    ///         IoC registered for the duration of the application (not the thread).
    ///         as some configuration hits remote services (eg: Azure KeyVault)
    ///         which would be rather slow.
    ///     </para>
    /// </summary>
    /// <seealso cref="IConfigurationObject" />
    public class MediaMalwareDetectionServiceConfiguration 
        : ConfigurationObjectBase
            , IHasServiceClientInformation
    {
        public readonly ScaniiClient ScaniiClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaMalwareDetectionServiceConfiguration"/> class.
        /// </summary>
        /// <param name="diagnosticsTracingService">The diagnostics tracing service.</param>
        /// <param name="configurationService">The configuration service.</param>
        public MediaMalwareDetectionServiceConfiguration(
            IDiagnosticsTracingService diagnosticsTracingService,
            IConfigurationService configurationService)
        {
            configurationService.Get(this);

            ScaniiClient = new ScaniiClient(diagnosticsTracingService,
                ClientIdentifier,
                ClientSecret,
                BaseUri);
        }

        /// <summary>
        ///     TODO: Gets or sets the base URI.
        /// </summary>
        [ConfigurationSettingSource(SourceType.AppSettingsViaDeploymentPipeline)]
        [Alias(ConfigurationKeys.AppCoreIntegrationMalwareDetectionBaseUri)]
        public string BaseUri { get; set; }


        /// <summary>
        ///     Gets or sets any misc configuration.
        /// </summary>
        /// <value>
        ///     The misc configuration.
        /// </value>
        [ConfigurationSettingSource(SourceType.AppSettingsViaDeploymentPipeline)]
        [Alias(ConfigurationKeys.AppCoreIntegrationMalwareDetectionClientMiscConfig)]
        public string MiscConfig { get; set; }

        [ConfigurationSettingSource(SourceType.AppSettingsViaDeploymentPipeline)]
        [Alias(ConfigurationKeys.AppCoreIntegrationMalwareDetectionClientId)]
        public string ClientIdentifier { get; set; }

        // Make sure this kind of secrets are not gotten from AppSettings.
        /// <summary>
        ///     Gets or sets the secret.
        /// </summary>
        [ConfigurationSettingSource(SourceType.KeyVault)]
        [Alias(ConfigurationKeys.AppCoreIntegrationMalwareDetectionClientSecret)]
        public string ClientSecret { get; set; }

    }
}