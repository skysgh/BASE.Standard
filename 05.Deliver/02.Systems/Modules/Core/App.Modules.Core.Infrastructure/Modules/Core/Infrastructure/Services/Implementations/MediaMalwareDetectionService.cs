// Copyright MachineBrains, Inc. 2019

using System.Collections.Generic;
using App.Modules.All.Infrastructure.Services;
using App.Modules.All.Shared.Models;
using App.Modules.Core.Infrastructure.ServiceAgents.Implementations.Scanii;
using App.Modules.Core.Infrastructure.Services.Configuration;
using App.Modules.Core.Infrastructure.Services.Statuses;
using App.Modules.Core.Shared.Models.Messages;

namespace App.Modules.Core.Infrastructure.Services.Implementations
{
    /// <summary>
    ///     Implementation of the
    ///     <see cref="IMediaMalwareDetectionService" />
    ///     Infrastructure Service Contract
    ///     to validate whether an uploaded stream is malware or not.
    /// </summary>
    public class MediaMalwareDetectionService 
        : AppCoreServiceBase, 
            IMediaMalwareDetectionService,
            IHasPing
    {
        private readonly MediaMalwareDetectionServiceConfiguration _configuration;
        private readonly IConfigurationStatusService _configurationStatusService;
        private readonly IDiagnosticsTracingService _diagnosticsTracingService;
        private ScaniiClient _scaniiClient;
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaMalwareDetectionService"/> class.
        /// </summary>
        /// <param name="diagnosticsTracingService">The diagnostics tracing service.</param>
        /// <param name="mediaMalwareVerificationServiceConfiguration">The media malware verification service configuration.</param>
        /// <param name="configurationStatusService">The configuration status service.</param>
        public MediaMalwareDetectionService(IDiagnosticsTracingService diagnosticsTracingService,
            MediaMalwareDetectionServiceConfiguration mediaMalwareVerificationServiceConfiguration,
            IConfigurationStatusService configurationStatusService)
        {
            _diagnosticsTracingService = diagnosticsTracingService;
            _configuration = mediaMalwareVerificationServiceConfiguration;
            this._configurationStatusService = configurationStatusService;

            _scaniiClient =
                new ScaniiClient(diagnosticsTracingService,
                 _configuration.ClientIdentifier,
                 _configuration.ClientSecret,
                 _configuration.BaseUri);
        }


        public MediaMalwareScanResult Validate(byte[] fileBytes, string fileName, string contentMimeType)
        {
            MediaMalwareScanResult result;

            if (!_configuration.Enabled)
            {
                result =
                    new MediaMalwareScanResult();
                result.LatestScanMalwareDetected = true;
                result.LatestScanResults = "Service Configuration is such that service is disabled.";
                return result;
            }
            ScaniiResult sr;
            try
            {
                sr =
                    _scaniiClient.Process(fileBytes, fileName, contentMimeType);
                _configurationStatusService.SetStatusToVerified<IMediaMalwareDetectionService>();
            }
#pragma warning disable CS0168 // Variable is declared but never used
#pragma warning disable IDE0059 // Value assigned to symbol is never used
            catch (System.Exception e)
#pragma warning restore IDE0059 // Value assigned to symbol is never used
#pragma warning restore CS0168 // Variable is declared but never used
            {
                throw;
            }

            //In case:
            if (sr.Findings == null)
            {
                sr.Findings = new List<string>();
            }

            var results = new MediaMalwareScanResult
            {
                LatestScanMalwareDetected = sr.Findings.Count > 0,
                LatestScanResults = sr.Findings != null ? string.Join(";", sr.Findings) : null
            };

            return results;
        }


        public bool Ping()
        {
            if (!_configuration.Enabled)
            {
                return false;
            }

            try
            {
                var result =
                    _scaniiClient.Ping();
                return result;
            }catch { }

            return false;
        }
    }
}