// Copyright MachineBrains, Inc. 2019

using System.Collections.Generic;
using App.Modules.Core.Infrastructure.Services.Configuration.Implementations;
using App.Modules.Core.Infrastructure.Services.Implementations.Base;
using App.Modules.Core.Shared.Models.Messages;

namespace App.Modules.Core.Infrastructure.Services.Implementations
{
    /// <summary>
    ///     Implementation of the
    ///     <see cref="IMediaMalwareDetectionService" />
    ///     Infrastructure Service Contract
    ///     to validate whether an uploaded stream is malware or not.
    /// </summary>
    public class MediaMalwareDetectionService : AppCoreServiceBase, IMediaMalwareDetectionService
    {
        private readonly IDiagnosticsTracingService _diagnosticsTracingService;

        public MediaMalwareDetectionService(IDiagnosticsTracingService diagnosticsTracingService,
            MediaMalwareDetectionServiceConfiguration mediaMalwareVerificationServiceConfiguration)
        {
            _diagnosticsTracingService = diagnosticsTracingService;
            Configuration = mediaMalwareVerificationServiceConfiguration;
        }

        public MediaMalwareDetectionServiceConfiguration Configuration { get; }

        public MediaMalwareScanResult Validate(byte[] fileBytes, string fileName, string contentMimeType)
        {
            var result =
                Configuration.ScaniiClient.Process(fileBytes, fileName, contentMimeType);

            //In case:
            if (result.Findings == null)
            {
                result.Findings = new List<string>();
            }

            var results = new MediaMalwareScanResult
            {
                LatestScanMalwareDetected = result.Findings.Count > 0,
                LatestScanResults = result.Findings != null ? string.Join(";", result.Findings) : null
            };

            return results;
        }


        public bool Ping()
        {
            var result =
                Configuration.ScaniiClient.Ping();
            return false;
        }
    }
}