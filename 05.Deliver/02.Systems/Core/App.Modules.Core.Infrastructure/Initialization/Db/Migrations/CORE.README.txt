Tip: 
Make sure you've read App.Modules.Core.Application/Db/README.txt for a general 
idea of how DbContexts, Migrations, Seeding work when combined with IoC/DI.

// For initializers, see DatabaseInitializerConfigure.cs
// But this can also be done solely via web.config as per bottom of
// https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application

// Run once, at the beginning of projects, to create the Db/Configuration class:
Enable-Migrations -StartUpProjectName "App.Host" -ProjectName "App.Modules.Core.Infrastructure" -ContextProjectName "App.Modules.Core.Infrastructure" -MigrationsDirectory "Initialization\Db\Migrations\Core" -Verbose

// Run after every Db Model schema change, changing the name every time, in order to make a Migration class
add-Migration "Entities.Example" -StartUpProjectName "App.Host" -ProjectName "App.Modules.Core.Infrastructure" -Verbose           
//$migrationName="MyMigration";"Core","Module01","Module02" | foreach {add-Migration "$migrationName" -StartUpProjectName "App.Host" -ProjectName "App.$_.Infrastructure" -Verbose} 

// Run after every Db Model schema change to apply the above migration class:
Update-Database -StartUpProjectName "App.Host" -ProjectName "App.Modules.Core.Infrastructure" -Verbose 

//Do them all together
"Core","Module01","Module02" | foreach {Update-Database -StartUpProjectName:"App.Modules.Core.Application" -ProjectName:"App.$input.Infrastructure"  -Verbose}

// Generate SQL scripts for deployment:
Update-Database -StartUpProjectName "App.Host" -ProjectName "App.Modules.Core.Infrastructure" -Script -SourceMigration: $InitialDatabase
// Generate SQL scripts for deployment up to a target Migration:
//Update-Database -StartUpProjectName "App.Host" -ProjectName "App.Modules.Core.Infrastructure" -Script -SourceMigration: $InitialDatabase -TargetMigration: AddPostAbstract


